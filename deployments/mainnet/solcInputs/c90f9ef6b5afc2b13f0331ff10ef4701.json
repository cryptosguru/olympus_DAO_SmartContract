{
  "language": "Solidity",
  "sources": {
    "contracts/allocators/AaveAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"../libraries/Address.sol\";\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\n\nimport \"../types/OlympusAccessControlled.sol\";\n\ninterface ILendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n}\n\ninterface IStakedTokenIncentivesController {\n    function claimRewards(\n        address[] memory assets,\n        uint256 amount,\n        address to\n    ) external;\n\n    function claimRewardsOnBehalf(\n        address[] memory assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external;\n\n    function getRewardsBalance(address[] memory assets, address user) external view returns (uint256);\n}\n\n/**\n *  Contract deploys reserves from treasury into the Aave lending pool,\n *  earning interest and $stkAAVE.\n */\n\ncontract AaveAllocator is OlympusAccessControlled {\n    /* ======== DEPENDENCIES ======== */\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    struct aTokenData {\n        address underlying;\n        address aToken;\n        uint256 deployed;\n        uint256 limit;\n        uint256 newLimit;\n        uint256 limitChangeTimelockEnd;\n    }\n\n    /* ======== STATE VARIABLES ======== */\n\n    // stkAave incentive controller\n    IStakedTokenIncentivesController internal immutable incentives =\n        IStakedTokenIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\n    // Aave Lending Pool\n    ILendingPool internal immutable lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    // Olympus Treasury\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\n\n    // all relevant aTokens\n    address[] public aTokens;\n    // corresponding aTokens for tokens\n    mapping(address => aTokenData) public aTokenInfo;\n    // total RFV deployed into lending pool\n    uint256 public totalValueDeployed;\n\n    // timelock to raise deployment limit\n    uint256 public immutable timelockInBlocks = 6600;\n    // rebates portion of lending pool fees\n    uint16 public referralCode;\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {\n        referralCode = 0;\n    }\n\n    /* ======== OPEN FUNCTIONS ======== */\n\n    /**\n     * @notice claims accrued stkAave rewards for all tracked aTokens\n     */\n    function harvest() public {\n        incentives.claimRewards(aTokens, rewardsPending(), address(treasury));\n    }\n\n    /**\n     * @notice claims accrued stkAave rewards for given aTokens\n     */\n    function harvestFor(address[] calldata _aTokens) external {\n        incentives.claimRewards(_aTokens, rewardsPendingFor(_aTokens), address(treasury));\n    }\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    /**\n     * @notice withdraws asset from treasury, deposits asset into lending pool, then deposits aToken into treasury\n     */\n    function deposit(address token, uint256 amount) public onlyPolicy {\n        require(!exceedsLimit(token, amount), \"Exceeds deposit limit\");\n\n        // retrieve amount of asset from treasury\n        treasury.manage(token, amount);\n\n        // approve and deposit into lending pool, returning aToken\n        IERC20(token).approve(address(lendingPool), amount);\n        lendingPool.deposit(token, amount, address(this), referralCode);\n\n        // account for deposit\n        accountingFor(token, amount, treasury.tokenValue(token, amount), true);\n    }\n\n    /**\n     * @notice withdraws aToken from treasury, withdraws from lending pool, and deposits asset into treasury\n     */\n    function withdraw(address token, uint256 amount) public onlyPolicy {\n        // approve and withdraw from lending pool, returning asset\n        IERC20(aTokenInfo[token].aToken).approve(address(lendingPool), amount);\n        lendingPool.withdraw(token, amount, address(this));\n\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 value = treasury.tokenValue(token, balance);\n\n        // account for withdrawal\n        accountingFor(token, balance, value, false);\n\n        // approve and deposit asset into treasury\n        IERC20(token).approve(address(treasury), balance);\n        treasury.deposit(balance, token, value);\n    }\n\n    /**\n     * @notice adds asset and corresponding aToken to mapping\n     */\n    function addToken(\n        address token,\n        address aToken,\n        uint256 max\n    ) external onlyPolicy {\n        require(token != address(0), \"Token: Zero address\");\n        require(aToken != address(0), \"aToken: Zero address\");\n        require(aTokenInfo[token].deployed == 0, \"Token added\");\n\n        aTokenInfo[token] = aTokenData({\n            underlying: token,\n            aToken: aToken,\n            deployed: 0,\n            limit: max,\n            newLimit: 0,\n            limitChangeTimelockEnd: 0\n        });\n    }\n\n    /**\n     * @notice lowers max can be deployed for asset (no timelock)\n     */\n    function lowerLimit(address token, uint256 newMax) external onlyPolicy {\n        require(newMax < aTokenInfo[token].limit, \"Must be lower\");\n        require(newMax > aTokenInfo[token].deployed, \"Must be less than deployed\");\n        aTokenInfo[token].limit = newMax;\n    }\n\n    /**\n     * @notice starts timelock to raise max allocation for asset\n     */\n    function queueRaiseLimit(address token, uint256 newMax) external onlyPolicy {\n        aTokenInfo[token].limitChangeTimelockEnd = block.number.add(timelockInBlocks);\n        aTokenInfo[token].newLimit = newMax;\n    }\n\n    /**\n     * @notice changes max allocation for asset when timelock elapsed\n     */\n    function raiseLimit(address token) external onlyPolicy {\n        aTokenData storage info = aTokenInfo[token];\n        require(block.number >= info.limitChangeTimelockEnd, \"Timelock not expired\");\n        info.limit = info.newLimit;\n        info.newLimit = 0;\n        info.limitChangeTimelockEnd = 0;\n    }\n\n    /**\n     * @notice set referral code for rebate on fees\n     */\n    function setReferralCode(uint16 code) external onlyPolicy {\n        referralCode = code;\n    }\n\n    /* ======== INTERNAL FUNCTIONS ======== */\n\n    /**\n     * @notice accounting of deposits/withdrawals of assets\n     */\n    function accountingFor(\n        address token,\n        uint256 amount,\n        uint256 value,\n        bool add\n    ) internal {\n        if (add) {\n            aTokenInfo[token].deployed = aTokenInfo[token].deployed.add(amount); // track amount allocated into pool\n            totalValueDeployed = totalValueDeployed.add(value); // track total value allocated into pools\n        } else {\n            // track amount allocated into pool\n            if (amount < aTokenInfo[token].deployed) {\n                aTokenInfo[token].deployed = aTokenInfo[token].deployed.sub(amount);\n            } else aTokenInfo[token].deployed = 0;\n\n            // track total value allocated into pools\n            if (value < totalValueDeployed) {\n                totalValueDeployed = totalValueDeployed.sub(value);\n            } else totalValueDeployed = 0;\n        }\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     * @notice query all pending rewards\n     */\n    function rewardsPending() public view returns (uint256) {\n        return incentives.getRewardsBalance(aTokens, address(this));\n    }\n\n    /**\n     * @notice query pending rewards for provided aTokens\n     */\n    function rewardsPendingFor(address[] calldata tokens) public view returns (uint256) {\n        return incentives.getRewardsBalance(tokens, address(this));\n    }\n\n    /**\n     * @notice checks to ensure deposit does not exceed max allocation for asset\n     */\n    function exceedsLimit(address token, uint256 amount) public view returns (bool) {\n        uint256 willBeDeployed = aTokenInfo[token].deployed.add(amount);\n        return (willBeDeployed > aTokenInfo[token].limit);\n    }\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\n// TODO(zx): replace with OZ implementation.\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    //     return _functionCallWithValue(target, data, value, errorMessage);\n    // }\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    // Only used in the  BondingCalculator.sol\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 b = add(div(a, 2), 1);\n            while (b < c) {\n                c = b;\n                b = div(add(div(a, b), b), 2);\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface ITreasury {\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256);\n\n    function withdraw(uint256 _amount, address _token) external;\n\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\n\n    function mint(address _recipient, uint256 _amount) external;\n\n    function manage(address _token, uint256 _amount) external;\n\n    function incurDebt(uint256 amount_, address token_) external;\n\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\n\n    function excessReserves() external view returns (uint256);\n\n    function baseSupply() external view returns (uint256);\n}\n"
    },
    "contracts/types/OlympusAccessControlled.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IOlympusAuthority.sol\";\n\nabstract contract OlympusAccessControlled {\n    /* ========== EVENTS ========== */\n\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\n\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\n\n    /* ========== STATE VARIABLES ========== */\n\n    IOlympusAuthority public authority;\n\n    /* ========== Constructor ========== */\n\n    constructor(IOlympusAuthority _authority) {\n        authority = _authority;\n        emit AuthorityUpdated(_authority);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyGovernor() {\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyPolicy() {\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\n        _;\n    }\n\n    /* ========== GOV ONLY ========== */\n\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\n        authority = _newAuthority;\n        emit AuthorityUpdated(_newAuthority);\n    }\n}\n"
    },
    "contracts/interfaces/IOlympusAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IOlympusAuthority {\n    /* ========== EVENTS ========== */\n\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n\n    event GovernorPulled(address indexed from, address indexed to);\n    event GuardianPulled(address indexed from, address indexed to);\n    event PolicyPulled(address indexed from, address indexed to);\n    event VaultPulled(address indexed from, address indexed to);\n\n    /* ========== VIEW ========== */\n\n    function governor() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function policy() external view returns (address);\n\n    function vault() external view returns (address);\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/IOHM.sol\";\nimport \"./interfaces/IsOHM.sol\";\nimport \"./interfaces/IBondingCalculator.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\nimport \"./types/OlympusAccessControlled.sol\";\n\ncontract OlympusTreasury is OlympusAccessControlled, ITreasury {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== EVENTS ========== */\n\n    event Deposit(address indexed token, uint256 amount, uint256 value);\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\n    event CreateDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event RepayDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event Managed(address indexed token, uint256 amount);\n    event ReservesAudited(uint256 indexed totalReserves);\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\n    event PermissionQueued(STATUS indexed status, address queued);\n    event Permissioned(address addr, STATUS indexed status, bool result);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    enum STATUS {\n        RESERVEDEPOSITOR,\n        RESERVESPENDER,\n        RESERVETOKEN,\n        RESERVEMANAGER,\n        LIQUIDITYDEPOSITOR,\n        LIQUIDITYTOKEN,\n        LIQUIDITYMANAGER,\n        RESERVEDEBTOR,\n        REWARDMANAGER,\n        SOHM,\n        OHMDEBTOR\n    }\n\n    struct Queue {\n        STATUS managing;\n        address toPermit;\n        address calculator;\n        uint256 timelockEnd;\n        bool nullify;\n        bool executed;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IOHM public immutable OHM;\n    IsOHM public sOHM;\n\n    mapping(STATUS => address[]) public registry;\n    mapping(STATUS => mapping(address => bool)) public permissions;\n    mapping(address => address) public bondCalculator;\n\n    mapping(address => uint256) public debtLimit;\n\n    uint256 public totalReserves;\n    uint256 public totalDebt;\n    uint256 public ohmDebt;\n\n    Queue[] public permissionQueue;\n    uint256 public immutable blocksNeededForQueue;\n\n    bool public timelockEnabled;\n    bool public initialized;\n\n    uint256 public onChainGovernanceTimelock;\n\n    string internal notAccepted = \"Treasury: not accepted\";\n    string internal notApproved = \"Treasury: not approved\";\n    string internal invalidToken = \"Treasury: invalid token\";\n    string internal insufficientReserves = \"Treasury: insufficient reserves\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _ohm,\n        uint256 _timelock,\n        address _authority\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\n        require(_ohm != address(0), \"Zero address: OHM\");\n        OHM = IOHM(_ohm);\n\n        timelockEnabled = false;\n        initialized = false;\n        blocksNeededForQueue = _timelock;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice allow approved address to deposit an asset for OHM\n     * @param _amount uint256\n     * @param _token address\n     * @param _profit uint256\n     * @return send_ uint256\n     */\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external override returns (uint256 send_) {\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\n        } else {\n            revert(invalidToken);\n        }\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 value = tokenValue(_token, _amount);\n        // mint OHM needed and store amount of rewards for distribution\n        send_ = value.sub(_profit);\n        OHM.mint(msg.sender, send_);\n\n        totalReserves = totalReserves.add(value);\n\n        emit Deposit(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to burn OHM for reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function withdraw(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\n\n        uint256 value = tokenValue(_token, _amount);\n        OHM.burnFrom(msg.sender, value);\n\n        totalReserves = totalReserves.sub(value);\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit Withdrawal(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to withdraw assets\n     * @param _token address\n     * @param _amount uint256\n     */\n    function manage(address _token, uint256 _amount) external override {\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYMANAGER][msg.sender], notApproved);\n        } else {\n            require(permissions[STATUS.RESERVEMANAGER][msg.sender], notApproved);\n        }\n        if (permissions[STATUS.RESERVETOKEN][_token] || permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            uint256 value = tokenValue(_token, _amount);\n            require(value <= excessReserves(), insufficientReserves);\n            totalReserves = totalReserves.sub(value);\n        }\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit Managed(_token, _amount);\n    }\n\n    /**\n     * @notice mint new OHM using excess reserves\n     * @param _recipient address\n     * @param _amount uint256\n     */\n    function mint(address _recipient, uint256 _amount) external override {\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], notApproved);\n        require(_amount <= excessReserves(), insufficientReserves);\n        OHM.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    /**\n     * DEBT: The debt functions allow approved addresses to borrow treasury assets\n     * or OHM from the treasury, using sOHM as collateral. This might allow an\n     * sOHM holder to provide OHM liquidity without taking on the opportunity cost\n     * of unstaking, or alter their backing without imposing risk onto the treasury.\n     * Many of these use cases are yet to be defined, but they appear promising.\n     * However, we urge the community to think critically and move slowly upon\n     * proposals to acquire these permissions.\n     */\n\n    /**\n     * @notice allow approved address to borrow reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function incurDebt(uint256 _amount, address _token) external override {\n        uint256 value;\n        if (_token == address(OHM)) {\n            require(permissions[STATUS.OHMDEBTOR][msg.sender], notApproved);\n            value = _amount;\n        } else {\n            require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n            require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n            value = tokenValue(_token, _amount);\n        }\n        require(value != 0, invalidToken);\n\n        sOHM.changeDebt(value, msg.sender, true);\n        require(sOHM.debtBalances(msg.sender) <= debtLimit[msg.sender], \"Treasury: exceeds limit\");\n        totalDebt = totalDebt.add(value);\n\n        if (_token == address(OHM)) {\n            OHM.mint(msg.sender, value);\n            ohmDebt = ohmDebt.add(value);\n        } else {\n            totalReserves = totalReserves.sub(value);\n            IERC20(_token).safeTransfer(msg.sender, _amount);\n        }\n        emit CreateDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function repayDebtWithReserve(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 value = tokenValue(_token, _amount);\n        sOHM.changeDebt(value, msg.sender, false);\n        totalDebt = totalDebt.sub(value);\n        totalReserves = totalReserves.add(value);\n        emit RepayDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with OHM\n     * @param _amount uint256\n     */\n    function repayDebtWithOHM(uint256 _amount) external {\n        require(\n            permissions[STATUS.RESERVEDEBTOR][msg.sender] || permissions[STATUS.OHMDEBTOR][msg.sender],\n            notApproved\n        );\n        OHM.burnFrom(msg.sender, _amount);\n        sOHM.changeDebt(_amount, msg.sender, false);\n        totalDebt = totalDebt.sub(_amount);\n        ohmDebt = ohmDebt.sub(_amount);\n        emit RepayDebt(msg.sender, address(OHM), _amount, _amount);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice takes inventory of all tracked assets\n     * @notice always consolidate to recognized reserves before audit\n     */\n    function auditReserves() external onlyGovernor {\n        uint256 reserves;\n        address[] memory reserveToken = registry[STATUS.RESERVETOKEN];\n        for (uint256 i = 0; i < reserveToken.length; i++) {\n            if (permissions[STATUS.RESERVETOKEN][reserveToken[i]]) {\n                reserves = reserves.add(tokenValue(reserveToken[i], IERC20(reserveToken[i]).balanceOf(address(this))));\n            }\n        }\n        address[] memory liquidityToken = registry[STATUS.LIQUIDITYTOKEN];\n        for (uint256 i = 0; i < liquidityToken.length; i++) {\n            if (permissions[STATUS.LIQUIDITYTOKEN][liquidityToken[i]]) {\n                reserves = reserves.add(\n                    tokenValue(liquidityToken[i], IERC20(liquidityToken[i]).balanceOf(address(this)))\n                );\n            }\n        }\n        totalReserves = reserves;\n        emit ReservesAudited(reserves);\n    }\n\n    /**\n     * @notice set max debt for address\n     * @param _address address\n     * @param _limit uint256\n     */\n    function setDebtLimit(address _address, uint256 _limit) external onlyGovernor {\n        debtLimit[_address] = _limit;\n    }\n\n    /**\n     * @notice enable permission from queue\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function enable(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(timelockEnabled == false, \"Use queueTimelock\");\n        if (_status == STATUS.SOHM) {\n            sOHM = IsOHM(_address);\n        } else {\n            permissions[_status][_address] = true;\n\n            if (_status == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[_address] = _calculator;\n            }\n\n            (bool registered, ) = indexInRegistry(_address, _status);\n            if (!registered) {\n                registry[_status].push(_address);\n\n                if (_status == STATUS.LIQUIDITYTOKEN || _status == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(_address, _status);\n                    if (reg) {\n                        delete registry[_status][index];\n                    }\n                }\n            }\n        }\n        emit Permissioned(_address, _status, true);\n    }\n\n    /**\n     *  @notice disable permission from address\n     *  @param _status STATUS\n     *  @param _toDisable address\n     */\n    function disable(STATUS _status, address _toDisable) external {\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \"Only governor or guardian\");\n        permissions[_status][_toDisable] = false;\n        emit Permissioned(_toDisable, _status, false);\n    }\n\n    /**\n     * @notice check if registry contains address\n     * @return (bool, uint256)\n     */\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\n        address[] memory entries = registry[_status];\n        for (uint256 i = 0; i < entries.length; i++) {\n            if (_address == entries[i]) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n    /* ========== TIMELOCKED FUNCTIONS ========== */\n\n    // functions are used prior to enabling on-chain governance\n\n    /**\n     * @notice queue address to receive permission\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function queueTimelock(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(_address != address(0));\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        uint256 timelock = block.number.add(blocksNeededForQueue);\n        if (_status == STATUS.RESERVEMANAGER || _status == STATUS.LIQUIDITYMANAGER) {\n            timelock = block.number.add(blocksNeededForQueue.mul(2));\n        }\n        permissionQueue.push(\n            Queue({\n                managing: _status,\n                toPermit: _address,\n                calculator: _calculator,\n                timelockEnd: timelock,\n                nullify: false,\n                executed: false\n            })\n        );\n        emit PermissionQueued(_status, _address);\n    }\n\n    /**\n     *  @notice enable queued permission\n     *  @param _index uint256\n     */\n    function execute(uint256 _index) external {\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        Queue memory info = permissionQueue[_index];\n\n        require(!info.nullify, \"Action has been nullified\");\n        require(!info.executed, \"Action has already been executed\");\n        require(block.number >= info.timelockEnd, \"Timelock not complete\");\n\n        if (info.managing == STATUS.SOHM) {\n            // 9\n            sOHM = IsOHM(info.toPermit);\n        } else {\n            permissions[info.managing][info.toPermit] = true;\n\n            if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[info.toPermit] = info.calculator;\n            }\n            (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\n            if (!registered) {\n                registry[info.managing].push(info.toPermit);\n\n                if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.RESERVETOKEN);\n                    if (reg) {\n                        delete registry[STATUS.RESERVETOKEN][index];\n                    }\n                } else if (info.managing == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.LIQUIDITYTOKEN);\n                    if (reg) {\n                        delete registry[STATUS.LIQUIDITYTOKEN][index];\n                    }\n                }\n            }\n        }\n        permissionQueue[_index].executed = true;\n        emit Permissioned(info.toPermit, info.managing, true);\n    }\n\n    /**\n     * @notice cancel timelocked action\n     * @param _index uint256\n     */\n    function nullify(uint256 _index) external onlyGovernor {\n        permissionQueue[_index].nullify = true;\n    }\n\n    /**\n     * @notice disables timelocked functions\n     */\n    function disableTimelock() external onlyGovernor {\n        require(timelockEnabled == true, \"timelock already disabled\");\n        if (onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number) {\n            timelockEnabled = false;\n        } else {\n            onChainGovernanceTimelock = block.number.add(blocksNeededForQueue.mul(7)); // 7-day timelock\n        }\n    }\n\n    /**\n     * @notice enables timelocks after initilization\n     */\n    function initialize() external onlyGovernor {\n        require(initialized == false, \"Already initialized\");\n        timelockEnabled = true;\n        initialized = true;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns excess reserves not backing tokens\n     * @return uint\n     */\n    function excessReserves() public view override returns (uint256) {\n        return totalReserves.sub(OHM.totalSupply().sub(totalDebt));\n    }\n\n    /**\n     * @notice returns OHM valuation of asset\n     * @param _token address\n     * @param _amount uint256\n     * @return value_ uint256\n     */\n    function tokenValue(address _token, uint256 _amount) public view override returns (uint256 value_) {\n        value_ = _amount.mul(10**IERC20Metadata(address(OHM)).decimals()).div(10**IERC20Metadata(_token).decimals());\n\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            value_ = IBondingCalculator(bondCalculator[_token]).valuation(_token, _amount);\n        }\n    }\n\n    /**\n     * @notice returns supply metric that cannot be manipulated by debt\n     * @dev use this any time you need to query supply\n     * @return uint256\n     */\n    function baseSupply() external view override returns (uint256) {\n        return OHM.totalSupply() - ohmDebt;\n    }\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IOwnable {\n    function owner() external view returns (address);\n\n    function renounceManagement() external;\n\n    function pushManagement(address newOwner_) external;\n\n    function pullManagement() external;\n}\n"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IOHM.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IOHM is IERC20 {\n    function mint(address account_, uint256 amount_) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n"
    },
    "contracts/interfaces/IsOHM.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IsOHM is IERC20 {\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n\n    function toG(uint256 amount) external view returns (uint256);\n\n    function fromG(uint256 amount) external view returns (uint256);\n\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external;\n\n    function debtBalances(address _address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IBondingCalculator {\n    function markdown(address _LP) external view returns (uint256);\n\n    function valuation(address pair_, uint256 amount_) external view returns (uint256 _value);\n}\n"
    },
    "contracts/vesting/Investor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\\\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IgOHM.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../types/Ownable.sol\";\n\ninterface IClaim {\n    struct Term {\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\n        uint256 wClaimed; // static number\n        uint256 max; // maximum nominal OHM amount can claim\n    }\n\n    function terms(address _address) external view returns (Term memory);\n}\n\n/**\n *  This contract allows Olympus seed investors and advisors to claim tokens.\n *  It has been revised to consider claims as staked immediately for accounting purposes.\n *  This ensures that network ownership does not exceed disclosed levels.\n *  Claimants remain protected from network dilution that may arise, but claim and stake\n *  does not allow them to grow ownership beyond predefined levels. This change also penalizes\n *  sellers, since the tokens sold are still considered staked within this contract. This\n *  step was taken to ensure fair distribution of exposure in the network.\n */\ncontract InvestorClaimV2 is Ownable {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STRUCTS ========== */\n\n    struct Term {\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\n        uint256 gClaimed; // rebase-agnostic number\n        uint256 max; // maximum nominal OHM amount can claim\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    // claim token\n    IERC20 internal immutable ohm = IERC20(0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5);\n    // payment token\n    IERC20 internal immutable dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    // mints claim token\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\n    // stake OHM for sOHM\n    IStaking internal immutable staking = IStaking(0xB63cac384247597756545b500253ff8E607a8020);\n    // holds non-circulating supply\n    address internal immutable dao = 0x245cc372C84B3645Bf0Ffe6538620B04a217988B;\n    // tracks rebase-agnostic balance\n    IgOHM internal immutable gOHM = IgOHM(0x0ab87046fBb341D058F17CBC4c1133F25a20a52f);\n    // previous deployment of contract (to migrate terms)\n    IClaim internal immutable previous = IClaim(0xaCCC8306455BaA01593Fa6267809fEA72F684169);\n\n    // tracks address info\n    mapping(address => Term) public terms;\n    // facilitates address change\n    mapping(address => address) public walletChange;\n    // as percent of supply (4 decimals: 10000 = 1%)\n    uint256 public totalAllocated;\n    // maximum portion of supply can allocate. == 4%\n    uint256 public maximumAllocated = 40000;\n\n    constructor() {}\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n\n    /**\n     * @notice allows wallet to claim OHM\n     * @param _to address\n     * @param _amount uint256\n     */\n    function claim(address _to, uint256 _amount) external {\n        ohm.safeTransfer(_to, _claim(_amount));\n    }\n\n    /**\n     * @notice allows wallet to claim OHM and stake. set _claim = true if warmup is 0.\n     * @param _to address\n     * @param _amount uint256\n     * @param _rebasing bool\n     * @param _claimFromStaking bool\n     */\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claimFromStaking\n    ) external {\n        staking.stake(_to, _claim(_amount), _rebasing, _claimFromStaking);\n    }\n\n    /**\n     * @notice logic for claiming OHM\n     * @param _amount uint256\n     * @return toSend_ uint256\n     */\n    function _claim(uint256 _amount) internal returns (uint256 toSend_) {\n        Term memory info = terms[msg.sender];\n\n        dai.safeTransferFrom(msg.sender, address(this), _amount);\n        toSend_ = treasury.deposit(_amount, address(dai), 0);\n\n        require(redeemableFor(msg.sender).div(1e9) >= toSend_, \"Claim more than vested\");\n        require(info.max.sub(claimed(msg.sender)) >= toSend_, \"Claim more than max\");\n\n        terms[msg.sender].gClaimed = info.gClaimed.add(gOHM.balanceTo(toSend_));\n    }\n\n    /**\n     * @notice allows address to push terms to new address\n     * @param _newAddress address\n     */\n    function pushWalletChange(address _newAddress) external {\n        require(terms[msg.sender].percent != 0, \"No wallet to change\");\n        walletChange[msg.sender] = _newAddress;\n    }\n\n    /**\n     * @notice allows new address to pull terms\n     * @param _oldAddress address\n     */\n    function pullWalletChange(address _oldAddress) external {\n        require(walletChange[_oldAddress] == msg.sender, \"Old wallet did not push\");\n        require(terms[msg.sender].percent != 0, \"Wallet already exists\");\n\n        walletChange[_oldAddress] = address(0);\n        terms[msg.sender] = terms[_oldAddress];\n        delete terms[_oldAddress];\n    }\n\n    /**\n     * @notice mass approval saves gas\n     */\n    function approve() external {\n        ohm.approve(address(staking), 1e33);\n        dai.approve(address(treasury), 1e33);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice view OHM claimable for address. DAI decimals (18).\n     * @param _address address\n     * @return uint256\n     */\n    function redeemableFor(address _address) public view returns (uint256) {\n        Term memory info = terms[_address];\n        uint256 max = circulatingSupply().mul(info.percent).div(1e6);\n        if (max > info.max) max = info.max;\n        return max.sub(claimed(_address)).mul(1e9);\n    }\n\n    /**\n     * @notice view OHM claimed by address. OHM decimals (9).\n     * @param _address address\n     * @return uint256\n     */\n    function claimed(address _address) public view returns (uint256) {\n        return gOHM.balanceFrom(terms[_address].gClaimed);\n    }\n\n    /**\n     * @notice view circulating supply of OHM\n     * @notice calculated as total supply minus DAO holdings\n     * @return uint256\n     */\n    function circulatingSupply() public view returns (uint256) {\n        return treasury.baseSupply().sub(ohm.balanceOf(dao));\n    }\n\n    /* ========== OWNER FUNCTIONS ========== */\n\n    /**\n     * @notice bulk migrate users from previous contract\n     * @param _addresses address[] memory\n     */\n    function migrate(address[] memory _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            IClaim.Term memory term = previous.terms(_addresses[i]);\n            setTerms(_addresses[i], term.percent, term.wClaimed, term.max);\n        }\n    }\n\n    /**\n     *  @notice set terms for new address\n     *  @notice cannot lower for address or exceed maximum total allocation\n     *  @param _address address\n     *  @param _percent uint256\n     *  @param _gClaimed uint256\n     *  @param _max uint256\n     */\n    function setTerms(\n        address _address,\n        uint256 _percent,\n        uint256 _gClaimed,\n        uint256 _max\n    ) public onlyOwner {\n        require(terms[_address].max == 0, \"address already exists\");\n        terms[_address] = Term({percent: _percent, gClaimed: _gClaimed, max: _max});\n        require(totalAllocated.add(_percent) <= maximumAllocated, \"Cannot allocate more\");\n        totalAllocated = totalAllocated.add(_percent);\n    }\n}\n"
    },
    "contracts/interfaces/IgOHM.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IgOHM is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n\n    function migrate(address _staking, address _sOHM) external;\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IStaking {\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256);\n\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\n\n    function forfeit() external returns (uint256);\n\n    function toggleLock() external;\n\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256);\n\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\n\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\n\n    function rebase() external;\n\n    function index() external view returns (uint256);\n\n    function contractBalance() external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n\n    function supplyInWarmup() external view returns (uint256);\n}\n"
    },
    "contracts/types/Ownable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IOwnable.sol\";\n\nabstract contract Ownable is IOwnable {\n    address internal _owner;\n    address internal _newOwner;\n\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipPushed(address(0), _owner);\n    }\n\n    function owner() public view override returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceManagement() public virtual override onlyOwner {\n        emit OwnershipPulled(_owner, address(0));\n        _owner = address(0);\n        _newOwner = address(0);\n    }\n\n    function pushManagement(address newOwner_) public virtual override onlyOwner {\n        emit OwnershipPushed(_owner, newOwner_);\n        _newOwner = newOwner_;\n    }\n\n    function pullManagement() public virtual override {\n        require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\n        emit OwnershipPulled(_owner, _newOwner);\n        _owner = _newOwner;\n        _newOwner = address(0);\n    }\n}\n"
    },
    "contracts/vesting/Genesis.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\\\npragma solidity 0.7.5;\npragma abicoder v2;\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IgOHM.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../types/Ownable.sol\";\n\ninterface IClaim {\n    struct Term {\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\n        uint256 claimed; // static number\n        uint256 wClaimed; // rebase-tracking number\n        uint256 max; // maximum nominal OHM amount can claim\n    }\n\n    function terms(address _address) external view returns (Term memory);\n}\n\n/**\n *  This contract allows Olympus genesis contributors to claim OHM. It has been\n *  revised to consider 9/10 tokens as staked at the time of claim; previously,\n *  no claims were treated as staked. This change keeps network ownership in check.\n *  100% can be treated as staked, if the DAO sees fit to do so.\n */\ncontract GenesisClaim is Ownable {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STRUCTS ========== */\n\n    struct Term {\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\n        uint256 claimed; // static number\n        uint256 gClaimed; // rebase-tracking number\n        uint256 max; // maximum nominal OHM amount can claim\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    // claim token\n    IERC20 internal immutable ohm = IERC20(0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5);\n    // payment token\n    IERC20 internal immutable dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    // mints claim token\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\n    // stake OHM for sOHM\n    IStaking internal immutable staking = IStaking(0xB63cac384247597756545b500253ff8E607a8020);\n    // holds non-circulating supply\n    address internal immutable dao = 0x245cc372C84B3645Bf0Ffe6538620B04a217988B;\n    // tracks rebase-agnostic balance\n    IgOHM internal immutable gOHM = IgOHM(0x0ab87046fBb341D058F17CBC4c1133F25a20a52f);\n    // previous deployment of contract (to migrate terms)\n    IClaim internal immutable previous = IClaim(0xEaAA9d97Be33a764031eDdEbA1cB6Cb385350Ca3);\n\n    // track 1/10 as static. governance can disable if desired.\n    bool public useStatic;\n    // tracks address info\n    mapping(address => Term) public terms;\n    // facilitates address change\n    mapping(address => address) public walletChange;\n    // as percent of supply (4 decimals: 10000 = 1%)\n    uint256 public totalAllocated;\n    // maximum portion of supply can allocate. == 7.8%\n    uint256 public maximumAllocated = 78000;\n\n    constructor() {\n        useStatic = true;\n    }\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n\n    /**\n     * @notice allows wallet to claim OHM\n     * @param _to address\n     * @param _amount uint256\n     */\n    function claim(address _to, uint256 _amount) external {\n        ohm.safeTransfer(_to, _claim(_amount));\n    }\n\n    /**\n     * @notice allows wallet to claim OHM and stake. set _claim = true if warmup is 0.\n     * @param _to address\n     * @param _amount uint256\n     * @param _rebasing bool\n     * @param _claimFromStaking bool\n     */\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claimFromStaking\n    ) external {\n        staking.stake(_to, _claim(_amount), _rebasing, _claimFromStaking);\n    }\n\n    /**\n     * @notice logic for claiming OHM\n     * @param _amount uint256\n     * @return toSend_ uint256\n     */\n    function _claim(uint256 _amount) internal returns (uint256 toSend_) {\n        Term memory info = terms[msg.sender];\n\n        dai.safeTransferFrom(msg.sender, address(this), _amount);\n        toSend_ = treasury.deposit(_amount, address(dai), 0);\n\n        require(redeemableFor(msg.sender).div(1e9) >= toSend_, \"Claim more than vested\");\n        require(info.max.sub(claimed(msg.sender)) >= toSend_, \"Claim more than max\");\n\n        if (useStatic) {\n            terms[msg.sender].gClaimed = info.gClaimed.add(gOHM.balanceTo(toSend_.mul(9).div(10)));\n            terms[msg.sender].claimed = info.claimed.add(toSend_.div(10));\n        } else terms[msg.sender].gClaimed = info.gClaimed.add(gOHM.balanceTo(toSend_));\n    }\n\n    /**\n     * @notice allows address to push terms to new address\n     * @param _newAddress address\n     */\n    function pushWalletChange(address _newAddress) external {\n        require(terms[msg.sender].percent != 0, \"No wallet to change\");\n        walletChange[msg.sender] = _newAddress;\n    }\n\n    /**\n     * @notice allows new address to pull terms\n     * @param _oldAddress address\n     */\n    function pullWalletChange(address _oldAddress) external {\n        require(walletChange[_oldAddress] == msg.sender, \"Old wallet did not push\");\n        require(terms[msg.sender].percent != 0, \"Wallet already exists\");\n\n        walletChange[_oldAddress] = address(0);\n        terms[msg.sender] = terms[_oldAddress];\n        delete terms[_oldAddress];\n    }\n\n    /**\n     * @notice mass approval saves gas\n     */\n    function approve() external {\n        ohm.approve(address(staking), 1e33);\n        dai.approve(address(treasury), 1e33);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice view OHM claimable for address. DAI decimals (18).\n     * @param _address address\n     * @return uint256\n     */\n    function redeemableFor(address _address) public view returns (uint256) {\n        Term memory info = terms[_address];\n        uint256 max = circulatingSupply().mul(info.percent).div(1e6);\n        if (max > info.max) max = info.max;\n        return max.sub(claimed(_address)).mul(1e9);\n    }\n\n    /**\n     * @notice view OHM claimed by address. OHM decimals (9).\n     * @param _address address\n     * @return uint256\n     */\n    function claimed(address _address) public view returns (uint256) {\n        return gOHM.balanceFrom(terms[_address].gClaimed).add(terms[_address].claimed);\n    }\n\n    /**\n     * @notice view circulating supply of OHM\n     * @notice calculated as total supply minus DAO holdings\n     * @return uint256\n     */\n    function circulatingSupply() public view returns (uint256) {\n        return treasury.baseSupply().sub(ohm.balanceOf(dao));\n    }\n\n    /* ========== OWNER FUNCTIONS ========== */\n\n    /**\n     * @notice bulk migrate users from previous contract\n     * @param _addresses address[] memory\n     */\n    function migrate(address[] memory _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            IClaim.Term memory term = previous.terms(_addresses[i]);\n            setTerms(_addresses[i], term.percent, term.claimed, term.wClaimed, term.max);\n        }\n    }\n\n    /**\n     *  @notice set terms for new address\n     *  @notice cannot lower for address or exceed maximum total allocation\n     *  @param _address address\n     *  @param _percent uint256\n     *  @param _claimed uint256\n     *  @param _gClaimed uint256\n     *  @param _max uint256\n     */\n    function setTerms(\n        address _address,\n        uint256 _percent,\n        uint256 _claimed,\n        uint256 _gClaimed,\n        uint256 _max\n    ) public onlyOwner {\n        require(terms[_address].max == 0, \"address already exists\");\n        terms[_address] = Term({percent: _percent, claimed: _claimed, gClaimed: _gClaimed, max: _max});\n        require(totalAllocated.add(_percent) <= maximumAllocated, \"Cannot allocate more\");\n        totalAllocated = totalAllocated.add(_percent);\n    }\n\n    /* ========== DAO FUNCTIONS ========== */\n\n    /**\n     * @notice all claims tracked under gClaimed (and track rebase)\n     */\n    function treatAllAsStaked() external {\n        require(msg.sender == dao, \"Sender is not DAO\");\n        useStatic = false;\n    }\n}\n"
    },
    "contracts/StakingDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\npragma abicoder v2;\n\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IDistributor.sol\";\nimport \"./interfaces/IStaking.sol\";\n\nimport \"./types/OlympusAccessControlled.sol\";\n\ninterface IEpoch {\n    struct Epoch {\n        uint256 length; // in seconds\n        uint256 number; // since inception\n        uint256 end; // timestamp\n        uint256 distribute; // amount\n    }\n\n    function epoch() external returns (Epoch memory);\n}\n\n/// @notice Patched distributor for fixing rebase miscalculation error\ncontract Distributor is IDistributor, OlympusAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ====== VARIABLES ====== */\n\n    IERC20 private immutable ohm;\n    ITreasury private immutable treasury;\n    address private immutable staking;\n\n    mapping(uint256 => Adjust) public adjustments;\n    uint256 public override bounty;\n\n    uint256 private immutable rateDenominator = 1_000_000;\n\n    // Used as patch for staking inconsistency bug. Restricts `rebase` logic to\n    // only be called from here.\n    bool private unlockRebase;\n\n    /* ====== STRUCTS ====== */\n\n    struct Info {\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n    Info[] public info;\n\n    struct Adjust {\n        bool add;\n        uint256 rate;\n        uint256 target;\n    }\n\n    /* ====== CONSTRUCTOR ====== */\n\n    constructor(\n        address _treasury,\n        address _ohm,\n        address _staking,\n        address _authority\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = ITreasury(_treasury);\n        require(_ohm != address(0), \"Zero address: OHM\");\n        ohm = IERC20(_ohm);\n        require(_staking != address(0), \"Zero address: Staking\");\n        staking = _staking;\n    }\n\n    /* ====== PUBLIC FUNCTIONS ====== */\n\n    /**\n        @notice Patch to trigger rebases via distributor. There is an error in the staking's\n                `stake` function which, if it triggers a rebase, pulls forward part of the\n                rebase for the next epoch. This patch triggers a rebase by calling unstake\n                (which does not have the issue). The patch also restricts `distribute` to\n                only be able to be called from a tx originating this function.\n\n                Unfortunately this is the _only_ way to resolve this bug without a migrate.\n     */\n    function triggerRebase() external {\n        require(IEpoch(staking).epoch().end <= block.timestamp, \"Epoch has not ended yet\");\n        unlockRebase = true;\n        IStaking(staking).unstake(msg.sender, 0, true, true); // Give the caller the bounty ohm.\n        unlockRebase = false;\n    }\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function distribute() external override {\n        require(msg.sender == staking, \"Only staking\");\n        require(unlockRebase, \"Rebase locked. Must call from `triggerRebase`.\");\n\n        // distribute rewards to each recipient\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].rate > 0) {\n                treasury.mint(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send tokens\n                adjust(i); // check for adjustment\n            }\n        }\n    }\n\n    function retrieveBounty() external override returns (uint256) {\n        require(msg.sender == staking, \"Only staking\");\n        // If the distributor bounty is > 0, mint it for the staking contract.\n        if (bounty > 0) {\n            treasury.mint(address(staking), bounty);\n        }\n\n        return bounty;\n    }\n\n    /* ====== INTERNAL FUNCTIONS ====== */\n\n    /**\n        @notice increment reward rate for collector\n     */\n    function adjust(uint256 _index) internal {\n        Adjust memory adjustment = adjustments[_index];\n        if (adjustment.rate != 0) {\n            if (adjustment.add) {\n                // if rate should increase\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\n                if (info[_index].rate >= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            } else {\n                // if rate should decrease\n                if (info[_index].rate > adjustment.rate) {\n                    // protect from underflow\n                    info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\n                } else {\n                    info[_index].rate = 0;\n                }\n\n                if (info[_index].rate <= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            }\n        }\n    }\n\n    /* ====== VIEW FUNCTIONS ====== */\n\n    /**\n        @notice view function for next reward at given rate\n        @param _rate uint\n        @return uint\n     */\n    function nextRewardAt(uint256 _rate) public view override returns (uint256) {\n        return treasury.baseSupply().mul(_rate).div(rateDenominator);\n    }\n\n    /**\n        @notice view function for next reward for specified address\n        @param _recipient address\n        @return uint\n     */\n    function nextRewardFor(address _recipient) public view override returns (uint256) {\n        uint256 reward;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].recipient == _recipient) {\n                reward = reward.add(nextRewardAt(info[i].rate));\n            }\n        }\n        return reward;\n    }\n\n    /* ====== POLICY FUNCTIONS ====== */\n\n    /**\n     * @notice set bounty to incentivize keepers\n     * @param _bounty uint256\n     */\n    function setBounty(uint256 _bounty) external override onlyGovernor {\n        require(_bounty <= 2e9, \"Too much\");\n        bounty = _bounty;\n    }\n\n    /**\n        @notice adds recipient for distributions\n        @param _recipient address\n        @param _rewardRate uint\n     */\n    function addRecipient(address _recipient, uint256 _rewardRate) external override onlyGovernor {\n        require(_recipient != address(0), \"Zero address: Recipient\");\n        require(_rewardRate <= rateDenominator, \"Rate cannot exceed denominator\");\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\n    }\n\n    /**\n        @notice removes recipient for distributions\n        @param _index uint\n     */\n    function removeRecipient(uint256 _index) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n        info[_index].recipient = address(0);\n        info[_index].rate = 0;\n    }\n\n    /**\n        @notice set adjustment info for a collector's reward rate\n        @param _index uint\n        @param _add bool\n        @param _rate uint\n        @param _target uint\n     */\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n\n        if (msg.sender == authority.guardian()) {\n            require(_rate <= info[_index].rate.mul(25).div(1000), \"Limiter: cannot adjust by >2.5%\");\n        }\n\n        if (!_add) {\n            require(_rate <= info[_index].rate, \"Cannot decrease rate by more than it already is\");\n        }\n\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\n    }\n}\n"
    },
    "contracts/interfaces/IDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IDistributor {\n    function distribute() external;\n\n    function bounty() external view returns (uint256);\n\n    function retrieveBounty() external returns (uint256);\n\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\n\n    function nextRewardFor(address _recipient) external view returns (uint256);\n\n    function setBounty(uint256 _bounty) external;\n\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\n\n    function removeRecipient(uint256 _index) external;\n\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external;\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IsOHM.sol\";\nimport \"./interfaces/IgOHM.sol\";\nimport \"./interfaces/IDistributor.sol\";\n\nimport \"./types/OlympusAccessControlled.sol\";\n\ncontract OlympusStaking is OlympusAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IsOHM;\n    using SafeERC20 for IgOHM;\n\n    /* ========== EVENTS ========== */\n\n    event DistributorSet(address distributor);\n    event WarmupSet(uint256 warmup);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Epoch {\n        uint256 length; // in seconds\n        uint256 number; // since inception\n        uint256 end; // timestamp\n        uint256 distribute; // amount\n    }\n\n    struct Claim {\n        uint256 deposit; // if forfeiting\n        uint256 gons; // staked balance\n        uint256 expiry; // end of warmup period\n        bool lock; // prevents malicious delays for claim\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public immutable OHM;\n    IsOHM public immutable sOHM;\n    IgOHM public immutable gOHM;\n\n    Epoch public epoch;\n\n    IDistributor public distributor;\n\n    mapping(address => Claim) public warmupInfo;\n    uint256 public warmupPeriod;\n    uint256 private gonsInWarmup;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _ohm,\n        address _sOHM,\n        address _gOHM,\n        uint256 _epochLength,\n        uint256 _firstEpochNumber,\n        uint256 _firstEpochTime,\n        address _authority\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\n        require(_ohm != address(0), \"Zero address: OHM\");\n        OHM = IERC20(_ohm);\n        require(_sOHM != address(0), \"Zero address: sOHM\");\n        sOHM = IsOHM(_sOHM);\n        require(_gOHM != address(0), \"Zero address: gOHM\");\n        gOHM = IgOHM(_gOHM);\n\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice stake OHM to enter warmup\n     * @param _to address\n     * @param _amount uint\n     * @param _claim bool\n     * @param _rebasing bool\n     * @return uint\n     */\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256) {\n        OHM.safeTransferFrom(msg.sender, address(this), _amount);\n        _amount = _amount.add(rebase()); // add bounty if rebase occurred\n        if (_claim && warmupPeriod == 0) {\n            return _send(_to, _amount, _rebasing);\n        } else {\n            Claim memory info = warmupInfo[_to];\n            if (!info.lock) {\n                require(_to == msg.sender, \"External deposits for account are locked\");\n            }\n\n            warmupInfo[_to] = Claim({\n                deposit: info.deposit.add(_amount),\n                gons: info.gons.add(sOHM.gonsForBalance(_amount)),\n                expiry: epoch.number.add(warmupPeriod),\n                lock: info.lock\n            });\n\n            gonsInWarmup = gonsInWarmup.add(sOHM.gonsForBalance(_amount));\n\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice retrieve stake from warmup\n     * @param _to address\n     * @param _rebasing bool\n     * @return uint\n     */\n    function claim(address _to, bool _rebasing) public returns (uint256) {\n        Claim memory info = warmupInfo[_to];\n\n        if (!info.lock) {\n            require(_to == msg.sender, \"External claims for account are locked\");\n        }\n\n        if (epoch.number >= info.expiry && info.expiry != 0) {\n            delete warmupInfo[_to];\n\n            gonsInWarmup = gonsInWarmup.sub(info.gons);\n\n            return _send(_to, sOHM.balanceForGons(info.gons), _rebasing);\n        }\n        return 0;\n    }\n\n    /**\n     * @notice forfeit stake and retrieve OHM\n     * @return uint\n     */\n    function forfeit() external returns (uint256) {\n        Claim memory info = warmupInfo[msg.sender];\n        delete warmupInfo[msg.sender];\n\n        gonsInWarmup = gonsInWarmup.sub(info.gons);\n\n        OHM.safeTransfer(msg.sender, info.deposit);\n\n        return info.deposit;\n    }\n\n    /**\n     * @notice prevent new deposits or claims from ext. address (protection from malicious activity)\n     */\n    function toggleLock() external {\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\n    }\n\n    /**\n     * @notice redeem sOHM for OHMs\n     * @param _to address\n     * @param _amount uint\n     * @param _trigger bool\n     * @param _rebasing bool\n     * @return amount_ uint\n     */\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256 amount_) {\n        amount_ = _amount;\n        uint256 bounty;\n        if (_trigger) {\n            bounty = rebase();\n        }\n        if (_rebasing) {\n            sOHM.safeTransferFrom(msg.sender, address(this), _amount);\n            amount_ = amount_.add(bounty);\n        } else {\n            gOHM.burn(msg.sender, _amount); // amount was given in gOHM terms\n            amount_ = gOHM.balanceFrom(amount_).add(bounty); // convert amount to OHM terms & add bounty\n        }\n\n        require(amount_ <= OHM.balanceOf(address(this)), \"Insufficient OHM balance in contract\");\n        OHM.safeTransfer(_to, amount_);\n    }\n\n    /**\n     * @notice convert _amount sOHM into gBalance_ gOHM\n     * @param _to address\n     * @param _amount uint\n     * @return gBalance_ uint\n     */\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_) {\n        sOHM.safeTransferFrom(msg.sender, address(this), _amount);\n        gBalance_ = gOHM.balanceTo(_amount);\n        gOHM.mint(_to, gBalance_);\n    }\n\n    /**\n     * @notice convert _amount gOHM into sBalance_ sOHM\n     * @param _to address\n     * @param _amount uint\n     * @return sBalance_ uint\n     */\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_) {\n        gOHM.burn(msg.sender, _amount);\n        sBalance_ = gOHM.balanceFrom(_amount);\n        sOHM.safeTransfer(_to, sBalance_);\n    }\n\n    /**\n     * @notice trigger rebase if epoch over\n     * @return uint256\n     */\n    function rebase() public returns (uint256) {\n        uint256 bounty;\n        if (epoch.end <= block.timestamp) {\n            sOHM.rebase(epoch.distribute, epoch.number);\n\n            epoch.end = epoch.end.add(epoch.length);\n            epoch.number++;\n\n            if (address(distributor) != address(0)) {\n                distributor.distribute();\n                bounty = distributor.retrieveBounty(); // Will mint ohm for this contract if there exists a bounty\n            }\n            uint256 balance = OHM.balanceOf(address(this));\n            uint256 staked = sOHM.circulatingSupply();\n            if (balance <= staked.add(bounty)) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance.sub(staked).sub(bounty);\n            }\n        }\n        return bounty;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @notice send staker their amount as sOHM or gOHM\n     * @param _to address\n     * @param _amount uint\n     * @param _rebasing bool\n     */\n    function _send(\n        address _to,\n        uint256 _amount,\n        bool _rebasing\n    ) internal returns (uint256) {\n        if (_rebasing) {\n            sOHM.safeTransfer(_to, _amount); // send as sOHM (equal unit as OHM)\n            return _amount;\n        } else {\n            gOHM.mint(_to, gOHM.balanceTo(_amount)); // send as gOHM (convert units from OHM)\n            return gOHM.balanceTo(_amount);\n        }\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns the sOHM index, which tracks rebase growth\n     * @return uint\n     */\n    function index() public view returns (uint256) {\n        return sOHM.index();\n    }\n\n    /**\n     * @notice total supply in warmup\n     */\n    function supplyInWarmup() public view returns (uint256) {\n        return sOHM.balanceForGons(gonsInWarmup);\n    }\n\n    /**\n     * @notice seconds until the next epoch begins\n     */\n    function secondsToNextEpoch() external view returns (uint256) {\n        return epoch.end.sub(block.timestamp);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice sets the contract address for LP staking\n     * @param _distributor address\n     */\n    function setDistributor(address _distributor) external onlyGovernor {\n        distributor = IDistributor(_distributor);\n        emit DistributorSet(_distributor);\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _warmupPeriod uint\n     */\n    function setWarmupLength(uint256 _warmupPeriod) external onlyGovernor {\n        warmupPeriod = _warmupPeriod;\n        emit WarmupSet(_warmupPeriod);\n    }\n}\n"
    },
    "contracts/sOlympusERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/Address.sol\";\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./types/ERC20Permit.sol\";\n\nimport \"./interfaces/IgOHM.sol\";\nimport \"./interfaces/IsOHM.sol\";\nimport \"./interfaces/IStaking.sol\";\n\ncontract sOlympus is IsOHM, ERC20Permit {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n\n    /* ========== EVENTS ========== */\n\n    event LogSupply(uint256 indexed epoch, uint256 totalSupply);\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"StakingContract:  call is not staking contract\");\n        _;\n    }\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    address internal initializer;\n\n    uint256 internal INDEX; // Index Gons - tracks rebase growth\n\n    address public stakingContract; // balance used to calc rebase\n    IgOHM public gOHM; // additional staked supply (governance token)\n\n    Rebase[] public rebases; // past rebase data\n\n    uint256 private constant MAX_UINT256 = type(uint256).max;\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5_000_000 * 10**9;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n    uint256 private _gonsPerFragment;\n    mapping(address => uint256) private _gonBalances;\n\n    mapping(address => mapping(address => uint256)) private _allowedValue;\n\n    address public treasury;\n    mapping(address => uint256) public override debtBalances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() ERC20(\"Staked OHM\", \"sOHM\", 9) ERC20Permit(\"Staked OHM\") {\n        initializer = msg.sender;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n    }\n\n    /* ========== INITIALIZATION ========== */\n\n    function setIndex(uint256 _index) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(INDEX == 0, \"Cannot set INDEX again\");\n        INDEX = gonsForBalance(_index);\n    }\n\n    function setgOHM(address _gOHM) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(address(gOHM) == address(0), \"gOHM:  gOHM already set\");\n        require(_gOHM != address(0), \"gOHM:  gOHM is not a valid contract\");\n        gOHM = IgOHM(_gOHM);\n    }\n\n    // do this last\n    function initialize(address _stakingContract, address _treasury) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n\n        require(_stakingContract != address(0), \"Staking\");\n        stakingContract = _stakingContract;\n        _gonBalances[stakingContract] = TOTAL_GONS;\n\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = _treasury;\n\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\n        emit LogStakingContractUpdated(stakingContract);\n\n        initializer = address(0);\n    }\n\n    /* ========== REBASE ========== */\n\n    /**\n        @notice increases rOHM supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        _totalSupply = _totalSupply.add(rebaseAmount);\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return _totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal {\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\n        rebases.push(\n            Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, _totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n    }\n\n    /* ========== MUTATIVE FUNCTIONS =========== */\n\n    function transfer(address to, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        uint256 gonValue = value.mul(_gonsPerFragment);\n\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n\n        require(balanceOf(msg.sender) >= debtBalances[msg.sender], \"Debt: cannot transfer amount\");\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override(IERC20, ERC20) returns (bool) {\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n\n        require(balanceOf(from) >= debtBalances[from], \"Debt: cannot transfer amount\");\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        _approve(msg.sender, spender, _allowedValue[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        uint256 oldValue = _allowedValue[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _approve(msg.sender, spender, 0);\n        } else {\n            _approve(msg.sender, spender, oldValue.sub(subtractedValue));\n        }\n        return true;\n    }\n\n    // this function is called by the treasury, and informs sOHM of changes to debt.\n    // note that addresses with debt balances cannot transfer collateralized sOHM\n    // until the debt has been repaid.\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external override {\n        require(msg.sender == treasury, \"Only treasury\");\n        if (add) {\n            debtBalances[debtor] = debtBalances[debtor].add(amount);\n        } else {\n            debtBalances[debtor] = debtBalances[debtor].sub(amount);\n        }\n        require(debtBalances[debtor] <= balanceOf(debtor), \"sOHM: insufficient balance\");\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual override {\n        _allowedValue[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function balanceOf(address who) public view override(IERC20, ERC20) returns (uint256) {\n        return _gonBalances[who].div(_gonsPerFragment);\n    }\n\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\n        return amount.mul(_gonsPerFragment);\n    }\n\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\n        return gons.div(_gonsPerFragment);\n    }\n\n    // toG converts an sOHM balance to gOHM terms. gOHM is an 18 decimal token. balance given is in 18 decimal format.\n    function toG(uint256 amount) external view override returns (uint256) {\n        return gOHM.balanceTo(amount);\n    }\n\n    // fromG converts a gOHM balance to sOHM terms. sOHM is a 9 decimal token. balance given is in 9 decimal format.\n    function fromG(uint256 amount) external view override returns (uint256) {\n        return gOHM.balanceFrom(amount);\n    }\n\n    // Staking contract holds excess sOHM\n    function circulatingSupply() public view override returns (uint256) {\n        return\n            _totalSupply.sub(balanceOf(stakingContract)).add(gOHM.balanceFrom(IERC20(address(gOHM)).totalSupply())).add(\n                IStaking(stakingContract).supplyInWarmup()\n            );\n    }\n\n    function index() public view override returns (uint256) {\n        return balanceForGons(INDEX);\n    }\n\n    function allowance(address owner_, address spender) public view override(IERC20, ERC20) returns (uint256) {\n        return _allowedValue[owner_][spender];\n    }\n}\n"
    },
    "contracts/types/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"./ERC20.sol\";\nimport \"../cryptography/EIP712.sol\";\nimport \"../cryptography/ECDSA.sol\";\nimport \"../libraries/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/types/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\nimport \"../libraries/SafeMath.sol\";\n\nimport \"../interfaces/IERC20.sol\";\n\nabstract contract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    // TODO comment actual hash value.\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\"ERC20Token\");\n\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal immutable _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal virtual {}\n}\n"
    },
    "contracts/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = chainID;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        if (chainID == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./SafeMath.sol\";\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "contracts/StandardBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/FixedPoint.sol\";\nimport \"./libraries/Address.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IBondingCalculator.sol\";\nimport \"./interfaces/IUniswapV2ERC20.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\ncontract OlympusBondingCalculator is IBondingCalculator {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n\n    IERC20 internal immutable OHM;\n\n    constructor(address _OHM) {\n        require(_OHM != address(0), \"Zero address: OHM\");\n        OHM = IERC20(_OHM);\n    }\n\n    function getKValue(address _pair) public view returns (uint256 k_) {\n        uint256 token0 = IERC20Metadata(IUniswapV2Pair(_pair).token0()).decimals();\n        uint256 token1 = IERC20Metadata(IUniswapV2Pair(_pair).token1()).decimals();\n        uint256 decimals = token0.add(token1).sub(IERC20Metadata(_pair).decimals());\n\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair).getReserves();\n        k_ = reserve0.mul(reserve1).div(10**decimals);\n    }\n\n    function getTotalValue(address _pair) public view returns (uint256 _value) {\n        _value = getKValue(_pair).sqrrt().mul(2);\n    }\n\n    function valuation(address _pair, uint256 amount_) external view override returns (uint256 _value) {\n        uint256 totalValue = getTotalValue(_pair);\n        uint256 totalSupply = IUniswapV2Pair(_pair).totalSupply();\n\n        _value = totalValue.mul(FixedPoint.fraction(amount_, totalSupply).decode112with18()).div(1e18);\n    }\n\n    function markdown(address _pair) external view override returns (uint256) {\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair).getReserves();\n\n        uint256 reserve;\n        if (IUniswapV2Pair(_pair).token0() == address(OHM)) {\n            reserve = reserve1;\n        } else {\n            require(IUniswapV2Pair(_pair).token1() == address(OHM), \"Invalid pair\");\n            reserve = reserve0;\n        }\n        return reserve.mul(2 * (10**IERC20Metadata(address(OHM)).decimals())).div(getTotalValue(_pair));\n    }\n}\n"
    },
    "contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./FullMath.sol\";\n\nlibrary Babylonian {\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\nlibrary BitMath {\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, \"BitMath::mostSignificantBit: zero\");\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n}\n\nlibrary FixedPoint {\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self) internal pure returns (uint256) {\n        return uint256(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint::fraction: division by zero\");\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= uint144(-1)) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\n            return uq112x112(uint224(result));\n        }\n    }\n\n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        if (self._x <= uint144(-1)) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    function token0() external pure returns (address);\n\n    function token1() external pure returns (address);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function sync() external;\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & -d;\n        d /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n\n        if (h == 0) return l / d;\n\n        require(h < d, \"FullMath: FULLDIV_OVERFLOW\");\n        return fullDiv(l, h, d);\n    }\n}\n"
    },
    "contracts/testnet/OhmFaucet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../types/Ownable.sol\";\n\ncontract OhmFaucet is Ownable {\n    IERC20 public ohm;\n\n    constructor(address _ohm) {\n        ohm = IERC20(_ohm);\n    }\n\n    function setOhm(address _ohm) external onlyOwner {\n        ohm = IERC20(_ohm);\n    }\n\n    function dispense() external {\n        ohm.transfer(msg.sender, 1e9);\n    }\n}\n"
    },
    "contracts/OlympusERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOHM.sol\";\nimport \"./interfaces/IERC20Permit.sol\";\n\nimport \"./types/ERC20Permit.sol\";\nimport \"./types/OlympusAccessControlled.sol\";\n\ncontract OlympusERC20Token is ERC20Permit, IOHM, OlympusAccessControlled {\n    using SafeMath for uint256;\n\n    constructor(address _authority)\n        ERC20(\"Olympus\", \"OHM\", 9)\n        ERC20Permit(\"Olympus\")\n        OlympusAccessControlled(IOlympusAuthority(_authority))\n    {}\n\n    function mint(address account_, uint256 amount_) external override onlyVault {\n        _mint(account_, amount_);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address account_, uint256 amount_) external override {\n        _burnFrom(account_, amount_);\n    }\n\n    function _burnFrom(address account_, uint256 amount_) internal {\n        uint256 decreasedAllowance_ = allowance(account_, msg.sender).sub(\n            amount_,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n\n        _approve(account_, msg.sender, decreasedAllowance_);\n        _burn(account_, amount_);\n    }\n}\n"
    },
    "contracts/migration/OlympusTokenMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IsOHM.sol\";\nimport \"../interfaces/IwsOHM.sol\";\nimport \"../interfaces/IgOHM.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/IOwnable.sol\";\nimport \"../interfaces/IUniswapV2Router.sol\";\nimport \"../interfaces/IStakingV1.sol\";\nimport \"../interfaces/ITreasuryV1.sol\";\n\nimport \"../types/OlympusAccessControlled.sol\";\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\ncontract OlympusTokenMigrator is OlympusAccessControlled {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IgOHM;\n    using SafeERC20 for IsOHM;\n    using SafeERC20 for IwsOHM;\n\n    /* ========== MIGRATION ========== */\n\n    event TimelockStarted(uint256 block, uint256 end);\n    event Migrated(address staking, address treasury);\n    event Funded(uint256 amount);\n    event Defunded(uint256 amount);\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public immutable oldOHM;\n    IsOHM public immutable oldsOHM;\n    IwsOHM public immutable oldwsOHM;\n    ITreasuryV1 public immutable oldTreasury;\n    IStakingV1 public immutable oldStaking;\n\n    IUniswapV2Router public immutable sushiRouter;\n    IUniswapV2Router public immutable uniRouter;\n\n    IgOHM public gOHM;\n    ITreasury public newTreasury;\n    IStaking public newStaking;\n    IERC20 public newOHM;\n\n    bool public ohmMigrated;\n    bool public shutdown;\n\n    uint256 public immutable timelockLength;\n    uint256 public timelockEnd;\n\n    uint256 public oldSupply;\n\n    constructor(\n        address _oldOHM,\n        address _oldsOHM,\n        address _oldTreasury,\n        address _oldStaking,\n        address _oldwsOHM,\n        address _sushi,\n        address _uni,\n        uint256 _timelock,\n        address _authority\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\n        require(_oldOHM != address(0), \"Zero address: OHM\");\n        oldOHM = IERC20(_oldOHM);\n        require(_oldsOHM != address(0), \"Zero address: sOHM\");\n        oldsOHM = IsOHM(_oldsOHM);\n        require(_oldTreasury != address(0), \"Zero address: Treasury\");\n        oldTreasury = ITreasuryV1(_oldTreasury);\n        require(_oldStaking != address(0), \"Zero address: Staking\");\n        oldStaking = IStakingV1(_oldStaking);\n        require(_oldwsOHM != address(0), \"Zero address: wsOHM\");\n        oldwsOHM = IwsOHM(_oldwsOHM);\n        require(_sushi != address(0), \"Zero address: Sushi\");\n        sushiRouter = IUniswapV2Router(_sushi);\n        require(_uni != address(0), \"Zero address: Uni\");\n        uniRouter = IUniswapV2Router(_uni);\n        timelockLength = _timelock;\n    }\n\n    /* ========== MIGRATION ========== */\n\n    enum TYPE {\n        UNSTAKED,\n        STAKED,\n        WRAPPED\n    }\n\n    // migrate OHMv1, sOHMv1, or wsOHM for OHMv2, sOHMv2, or gOHM\n    function migrate(\n        uint256 _amount,\n        TYPE _from,\n        TYPE _to\n    ) external {\n        require(!shutdown, \"Shut down\");\n\n        uint256 wAmount = oldwsOHM.sOHMTowOHM(_amount);\n\n        if (_from == TYPE.UNSTAKED) {\n            require(ohmMigrated, \"Only staked until migration\");\n            oldOHM.safeTransferFrom(msg.sender, address(this), _amount);\n        } else if (_from == TYPE.STAKED) {\n            oldsOHM.safeTransferFrom(msg.sender, address(this), _amount);\n        } else {\n            oldwsOHM.safeTransferFrom(msg.sender, address(this), _amount);\n            wAmount = _amount;\n        }\n\n        if (ohmMigrated) {\n            require(oldSupply >= oldOHM.totalSupply(), \"OHMv1 minted\");\n            _send(wAmount, _to);\n        } else {\n            gOHM.mint(msg.sender, wAmount);\n        }\n    }\n\n    // migrate all olympus tokens held\n    function migrateAll(TYPE _to) external {\n        require(!shutdown, \"Shut down\");\n\n        uint256 ohmBal = 0;\n        uint256 sOHMBal = oldsOHM.balanceOf(msg.sender);\n        uint256 wsOHMBal = oldwsOHM.balanceOf(msg.sender);\n\n        if (oldOHM.balanceOf(msg.sender) > 0 && ohmMigrated) {\n            ohmBal = oldOHM.balanceOf(msg.sender);\n            oldOHM.safeTransferFrom(msg.sender, address(this), ohmBal);\n        }\n        if (sOHMBal > 0) {\n            oldsOHM.safeTransferFrom(msg.sender, address(this), sOHMBal);\n        }\n        if (wsOHMBal > 0) {\n            oldwsOHM.safeTransferFrom(msg.sender, address(this), wsOHMBal);\n        }\n\n        uint256 wAmount = wsOHMBal.add(oldwsOHM.sOHMTowOHM(ohmBal.add(sOHMBal)));\n        if (ohmMigrated) {\n            require(oldSupply >= oldOHM.totalSupply(), \"OHMv1 minted\");\n            _send(wAmount, _to);\n        } else {\n            gOHM.mint(msg.sender, wAmount);\n        }\n    }\n\n    // send preferred token\n    function _send(uint256 wAmount, TYPE _to) internal {\n        if (_to == TYPE.WRAPPED) {\n            gOHM.safeTransfer(msg.sender, wAmount);\n        } else if (_to == TYPE.STAKED) {\n            newStaking.unwrap(msg.sender, wAmount);\n        } else if (_to == TYPE.UNSTAKED) {\n            newStaking.unstake(msg.sender, wAmount, false, false);\n        }\n    }\n\n    // bridge back to OHM, sOHM, or wsOHM\n    function bridgeBack(uint256 _amount, TYPE _to) external {\n        if (!ohmMigrated) {\n            gOHM.burn(msg.sender, _amount);\n        } else {\n            gOHM.safeTransferFrom(msg.sender, address(this), _amount);\n        }\n\n        uint256 amount = oldwsOHM.wOHMTosOHM(_amount);\n        // error throws if contract does not have enough of type to send\n        if (_to == TYPE.UNSTAKED) {\n            oldOHM.safeTransfer(msg.sender, amount);\n        } else if (_to == TYPE.STAKED) {\n            oldsOHM.safeTransfer(msg.sender, amount);\n        } else if (_to == TYPE.WRAPPED) {\n            oldwsOHM.safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    /* ========== OWNABLE ========== */\n\n    // halt migrations (but not bridging back)\n    function halt() external onlyPolicy {\n        require(!ohmMigrated, \"Migration has occurred\");\n        shutdown = !shutdown;\n    }\n\n    // withdraw backing of migrated OHM\n    function defund(address reserve) external onlyGovernor {\n        require(ohmMigrated, \"Migration has not begun\");\n        require(timelockEnd < block.number && timelockEnd != 0, \"Timelock not complete\");\n\n        oldwsOHM.unwrap(oldwsOHM.balanceOf(address(this)));\n\n        uint256 amountToUnstake = oldsOHM.balanceOf(address(this));\n        oldsOHM.approve(address(oldStaking), amountToUnstake);\n        oldStaking.unstake(amountToUnstake, false);\n\n        uint256 balance = oldOHM.balanceOf(address(this));\n\n        if (balance > oldSupply) {\n            oldSupply = 0;\n        } else {\n            oldSupply -= balance;\n        }\n\n        uint256 amountToWithdraw = balance.mul(1e9);\n        oldOHM.approve(address(oldTreasury), amountToWithdraw);\n        oldTreasury.withdraw(amountToWithdraw, reserve);\n        IERC20(reserve).safeTransfer(address(newTreasury), IERC20(reserve).balanceOf(address(this)));\n\n        emit Defunded(balance);\n    }\n\n    // start timelock to send backing to new treasury\n    function startTimelock() external onlyGovernor {\n        require(timelockEnd == 0, \"Timelock set\");\n        timelockEnd = block.number.add(timelockLength);\n\n        emit TimelockStarted(block.number, timelockEnd);\n    }\n\n    // set gOHM address\n    function setgOHM(address _gOHM) external onlyGovernor {\n        require(address(gOHM) == address(0), \"Already set\");\n        require(_gOHM != address(0), \"Zero address: gOHM\");\n\n        gOHM = IgOHM(_gOHM);\n    }\n\n    // call internal migrate token function\n    function migrateToken(address token) external onlyGovernor {\n        _migrateToken(token, false);\n    }\n\n    /**\n     *   @notice Migrate LP and pair with new OHM\n     */\n    function migrateLP(\n        address pair,\n        bool sushi,\n        address token,\n        uint256 _minA,\n        uint256 _minB\n    ) external onlyGovernor {\n        uint256 oldLPAmount = IERC20(pair).balanceOf(address(oldTreasury));\n        oldTreasury.manage(pair, oldLPAmount);\n\n        IUniswapV2Router router = sushiRouter;\n        if (!sushi) {\n            router = uniRouter;\n        }\n\n        IERC20(pair).approve(address(router), oldLPAmount);\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(\n            token,\n            address(oldOHM),\n            oldLPAmount,\n            _minA,\n            _minB,\n            address(this),\n            block.timestamp\n        );\n\n        newTreasury.mint(address(this), amountB);\n\n        IERC20(token).approve(address(router), amountA);\n        newOHM.approve(address(router), amountB);\n\n        router.addLiquidity(\n            token,\n            address(newOHM),\n            amountA,\n            amountB,\n            amountA,\n            amountB,\n            address(newTreasury),\n            block.timestamp\n        );\n    }\n\n    // Failsafe function to allow owner to withdraw funds sent directly to contract in case someone sends non-ohm tokens to the contract\n    function withdrawToken(\n        address tokenAddress,\n        uint256 amount,\n        address recipient\n    ) external onlyGovernor {\n        require(tokenAddress != address(0), \"Token address cannot be 0x0\");\n        require(tokenAddress != address(gOHM), \"Cannot withdraw: gOHM\");\n        require(tokenAddress != address(oldOHM), \"Cannot withdraw: old-OHM\");\n        require(tokenAddress != address(oldsOHM), \"Cannot withdraw: old-sOHM\");\n        require(tokenAddress != address(oldwsOHM), \"Cannot withdraw: old-wsOHM\");\n        require(amount > 0, \"Withdraw value must be greater than 0\");\n        if (recipient == address(0)) {\n            recipient = msg.sender; // if no address is specified the value will will be withdrawn to Owner\n        }\n\n        IERC20 tokenContract = IERC20(tokenAddress);\n        uint256 contractBalance = tokenContract.balanceOf(address(this));\n        if (amount > contractBalance) {\n            amount = contractBalance; // set the withdrawal amount equal to balance within the account.\n        }\n        // transfer the token from address of this contract\n        tokenContract.safeTransfer(recipient, amount);\n    }\n\n    // migrate contracts\n    function migrateContracts(\n        address _newTreasury,\n        address _newStaking,\n        address _newOHM,\n        address _newsOHM,\n        address _reserve\n    ) external onlyGovernor {\n        require(!ohmMigrated, \"Already migrated\");\n        ohmMigrated = true;\n        shutdown = false;\n\n        require(_newTreasury != address(0), \"Zero address: Treasury\");\n        newTreasury = ITreasury(_newTreasury);\n        require(_newStaking != address(0), \"Zero address: Staking\");\n        newStaking = IStaking(_newStaking);\n        require(_newOHM != address(0), \"Zero address: OHM\");\n        newOHM = IERC20(_newOHM);\n\n        oldSupply = oldOHM.totalSupply(); // log total supply at time of migration\n\n        gOHM.migrate(_newStaking, _newsOHM); // change gOHM minter\n\n        _migrateToken(_reserve, true); // will deposit tokens into new treasury so reserves can be accounted for\n\n        _fund(oldsOHM.circulatingSupply()); // fund with current staked supply for token migration\n\n        emit Migrated(_newStaking, _newTreasury);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    // fund contract with gOHM\n    function _fund(uint256 _amount) internal {\n        newTreasury.mint(address(this), _amount);\n        newOHM.approve(address(newStaking), _amount);\n        newStaking.stake(address(this), _amount, false, true); // stake and claim gOHM\n\n        emit Funded(_amount);\n    }\n\n    /**\n     *   @notice Migrate token from old treasury to new treasury\n     */\n    function _migrateToken(address token, bool deposit) internal {\n        uint256 balance = IERC20(token).balanceOf(address(oldTreasury));\n\n        uint256 excessReserves = oldTreasury.excessReserves();\n        uint256 tokenValue = oldTreasury.valueOf(token, balance);\n\n        if (tokenValue > excessReserves) {\n            tokenValue = excessReserves;\n            balance = excessReserves * 10**9;\n        }\n\n        oldTreasury.manage(token, balance);\n\n        if (deposit) {\n            IERC20(token).safeApprove(address(newTreasury), balance);\n            newTreasury.deposit(balance, token, tokenValue);\n        } else {\n            IERC20(token).safeTransfer(address(newTreasury), balance);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IwsOHM.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\n// Old wsOHM interface\ninterface IwsOHM is IERC20 {\n    function wrap(uint256 _amount) external returns (uint256);\n\n    function unwrap(uint256 _amount) external returns (uint256);\n\n    function wOHMTosOHM(uint256 _amount) external view returns (uint256);\n\n    function sOHMTowOHM(uint256 _amount) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n}\n"
    },
    "contracts/interfaces/IStakingV1.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IStakingV1 {\n    function unstake(uint256 _amount, bool _trigger) external;\n\n    function index() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITreasuryV1.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface ITreasuryV1 {\n    function withdraw(uint256 amount, address token) external;\n\n    function manage(address token, uint256 amount) external;\n\n    function valueOf(address token, uint256 amount) external view returns (uint256);\n\n    function excessReserves() external view returns (uint256);\n}\n"
    },
    "contracts/migration/LiquidityMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../libraries/SafeERC20.sol\";\nimport \"../libraries/SafeMath.sol\";\nimport \"../interfaces/IUniswapV2Router.sol\";\nimport \"../interfaces/IOlympusAuthority.sol\";\nimport \"../types/OlympusAccessControlled.sol\";\nimport \"../interfaces/ITreasury.sol\";\n\ninterface IMigrator {\n    enum TYPE {\n        UNSTAKED,\n        STAKED,\n        WRAPPED\n    }\n\n    // migrate OHMv1, sOHMv1, or wsOHM for OHMv2, sOHMv2, or gOHM\n    function migrate(\n        uint256 _amount,\n        TYPE _from,\n        TYPE _to\n    ) external;\n}\n\ncontract LiquidityMigrator is OlympusAccessControlled {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    ITreasury internal immutable oldTreasury = ITreasury(0x31F8Cc382c9898b273eff4e0b7626a6987C846E8);\n    ITreasury internal immutable newTreasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\n    IERC20 internal immutable oldOHM = IERC20(0x383518188C0C6d7730D91b2c03a03C837814a899);\n    IERC20 internal immutable newOHM = IERC20(0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5);\n    IMigrator internal immutable migrator = IMigrator(0x184f3FAd8618a6F458C16bae63F70C426fE784B3);\n\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\n\n    /**\n     * @notice Migrate LP and pair with new OHM\n     */\n    function migrateLP(\n        address pair,\n        IUniswapV2Router routerFrom,\n        IUniswapV2Router routerTo,\n        address token,\n        uint256 _minA,\n        uint256 _minB,\n        uint256 _deadline\n    ) external onlyGovernor {\n        // Since we are adding liquidity, any existing balance should be excluded\n        uint256 initialNewOHMBalance = newOHM.balanceOf(address(this));\n        // Fetch the treasury balance of the given liquidity pair\n        uint256 oldLPAmount = IERC20(pair).balanceOf(address(oldTreasury));\n        oldTreasury.manage(pair, oldLPAmount);\n\n        // Remove the V1 liquidity\n        IERC20(pair).approve(address(routerFrom), oldLPAmount);\n        (uint256 amountToken, uint256 amountOHM) = routerFrom.removeLiquidity(\n            token,\n            address(oldOHM),\n            oldLPAmount,\n            _minA,\n            _minB,\n            address(this),\n            _deadline\n        );\n\n        // Migrate the V1 OHM to V2 OHM\n        oldOHM.approve(address(migrator), amountOHM);\n        migrator.migrate(amountOHM, IMigrator.TYPE.UNSTAKED, IMigrator.TYPE.UNSTAKED);\n        uint256 amountNewOHM = newOHM.balanceOf(address(this)).sub(initialNewOHMBalance); // # V1 out != # V2 in\n\n        // Add the V2 liquidity\n        IERC20(token).approve(address(routerTo), amountToken);\n        newOHM.approve(address(routerTo), amountNewOHM);\n        routerTo.addLiquidity(\n            token,\n            address(newOHM),\n            amountToken,\n            amountNewOHM,\n            amountToken,\n            amountNewOHM,\n            address(newTreasury),\n            _deadline\n        );\n\n        // Send any leftover balance to the governor\n        newOHM.safeTransfer(authority.governor(), newOHM.balanceOf(address(this)));\n        oldOHM.safeTransfer(authority.governor(), oldOHM.balanceOf(address(this)));\n        IERC20(token).safeTransfer(authority.governor(), IERC20(token).balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/migration/CrossChainMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IOwnable.sol\";\nimport \"../types/Ownable.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\ncontract CrossChainMigrator is Ownable {\n    using SafeERC20 for IERC20;\n\n    IERC20 internal immutable wsOHM; // v1 token\n    IERC20 internal immutable gOHM; // v2 token\n\n    constructor(address _wsOHM, address _gOHM) {\n        require(_wsOHM != address(0), \"Zero address: wsOHM\");\n        wsOHM = IERC20(_wsOHM);\n        require(_gOHM != address(0), \"Zero address: gOHM\");\n        gOHM = IERC20(_gOHM);\n    }\n\n    // migrate wsOHM to gOHM - 1:1 like kind\n    function migrate(uint256 amount) external {\n        wsOHM.safeTransferFrom(msg.sender, address(this), amount);\n        gOHM.safeTransfer(msg.sender, amount);\n    }\n\n    // withdraw wsOHM so it can be bridged on ETH and returned as more gOHM\n    function replenish() external onlyOwner {\n        wsOHM.safeTransfer(msg.sender, wsOHM.balanceOf(address(this)));\n    }\n\n    // withdraw migrated wsOHM and unmigrated gOHM\n    function clear() external onlyOwner {\n        wsOHM.safeTransfer(msg.sender, wsOHM.balanceOf(address(this)));\n        gOHM.safeTransfer(msg.sender, gOHM.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/governance/gOHM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.5;\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/Address.sol\";\n\nimport \"../interfaces/IsOHM.sol\";\nimport \"../interfaces/IgOHM.sol\";\nimport \"../types/ERC20.sol\";\n\ncontract gOHM is IgOHM, ERC20 {\n    /* ========== DEPENDENCIES ========== */\n\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyApproved() {\n        require(msg.sender == approved, \"Only approved\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint256 fromBlock;\n        uint256 votes;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IsOHM public sOHM;\n    address public approved; // minter\n    bool public migrated;\n\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n    mapping(address => uint256) public numCheckpoints;\n    mapping(address => address) public delegates;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _migrator, address _sOHM) ERC20(\"Governance OHM\", \"gOHM\", 18) {\n        require(_migrator != address(0), \"Zero address: Migrator\");\n        approved = _migrator;\n        require(_sOHM != address(0), \"Zero address: sOHM\");\n        sOHM = IsOHM(_sOHM);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice transfer mint rights from migrator to staking\n     * @notice can only be done once, at the time of contract migration\n     * @param _staking address\n     * @param _sOHM address\n     */\n    function migrate(address _staking, address _sOHM) external override onlyApproved {\n        require(!migrated, \"Migrated\");\n        migrated = true;\n\n        require(_staking != approved, \"Invalid argument\");\n        require(_staking != address(0), \"Zero address found\");\n        approved = _staking;\n\n        require(_sOHM != address(0), \"Zero address found\");\n        sOHM = IsOHM(_sOHM);\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n        @notice mint gOHM\n        @param _to address\n        @param _amount uint\n     */\n    function mint(address _to, uint256 _amount) external override onlyApproved {\n        _mint(_to, _amount);\n    }\n\n    /**\n        @notice burn gOHM\n        @param _from address\n        @param _amount uint\n     */\n    function burn(address _from, uint256 _amount) external override onlyApproved {\n        _burn(_from, _amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice pull index from sOHM token\n     */\n    function index() public view override returns (uint256) {\n        return sOHM.index();\n    }\n\n    /**\n        @notice converts gOHM amount to OHM\n        @param _amount uint\n        @return uint\n     */\n    function balanceFrom(uint256 _amount) public view override returns (uint256) {\n        return _amount.mul(index()).div(10**decimals());\n    }\n\n    /**\n        @notice converts OHM amount to gOHM\n        @param _amount uint\n        @return uint\n     */\n    function balanceTo(uint256 _amount) public view override returns (uint256) {\n        return _amount.mul(10**decimals()).div(index());\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint256 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber < block.number, \"gOHM::getPriorVotes: not yet determined\");\n\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorBalance = _balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint256 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint256 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint256 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == block.number) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(block.number, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    /**\n        @notice Ensure delegation moves when token is transferred.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        _moveDelegates(delegates[from], delegates[to], amount);\n    }\n}\n"
    },
    "contracts/allocators/OnsenAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\nimport \"../libraries/Address.sol\";\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IAllocator.sol\";\n\nimport \"../types/Ownable.sol\";\n\ninterface IMasterChef {\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function emergencyWithdraw(uint256 _pid) external;\n}\n\ninterface ISushiBar {\n    function enter(uint256 _amount) external;\n\n    function leave(uint256 _share) external;\n}\n\n/**\n *  Contract deploys liquidity from treasury into the Onsen program,\n *  earning $SUSHI that can be staked and/or deposited into the treasury.\n */\ncontract OnsenAllocator is Ownable {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n\n    uint256[] public pids; // Pool IDs\n    mapping(uint256 => address) public pools; // Pool Addresses index by PID\n\n    address immutable sushi; // $SUSHI token\n    address immutable xSushi; // $xSUSHI token\n\n    address immutable masterChef; // Onsen contract\n\n    address immutable treasury; // Olympus Treasury\n\n    uint256 public totalValueDeployed; // Total RFV deployed\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _chef,\n        address _treasury,\n        address _sushi,\n        address _xSushi\n    ) {\n        require(_chef != address(0));\n        masterChef = _chef;\n        require(_treasury != address(0));\n        treasury = _treasury;\n        require(_sushi != address(0));\n        sushi = _sushi;\n        require(_xSushi != address(0));\n        xSushi = _xSushi;\n    }\n\n    /* ========== OPEN FUNCTIONS ========== */\n\n    /**\n     * @notice harvest Onsen rewards from all pools\n     * @param _stake bool\n     */\n    function harvest(bool _stake) external {\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 pid = pids[i];\n            if (pid != 0) {\n                // pid of 0 is invalid\n                IMasterChef(masterChef).withdraw(pid, 0); // withdrawing 0 harvests rewards\n            }\n        }\n        enterSushiBar(_stake);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @notice stake sushi rewards if enter is true. return funds to treasury.\n     * @param _stake bool\n     */\n    function enterSushiBar(bool _stake) internal {\n        uint256 balance = IERC20(sushi).balanceOf(address(this));\n        if (balance > 0) {\n            if (!_stake) {\n                IERC20(sushi).safeTransfer(treasury, balance); // transfer sushi to treasury\n            } else {\n                IERC20(sushi).approve(xSushi, balance);\n                ISushiBar(xSushi).enter(balance); // stake sushi\n\n                uint256 xBalance = IERC20(xSushi).balanceOf(address(this));\n                IERC20(xSushi).safeTransfer(treasury, xBalance); // transfer xSushi to treasury\n            }\n        }\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     *  @notice pending $SUSHI rewards\n     *  @return uint\n     */\n    function pendingSushi() external view returns (uint256) {\n        uint256 pending;\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 pid = pids[i];\n            if (pid != 0) {\n                pending = pending.add(IMasterChef(masterChef).pendingSushi(pid, address(this)));\n            }\n        }\n        return pending;\n    }\n\n    /* ========== POLICY FUNCTIONS ========== */\n\n    /**\n     * @notice deposit LP from treasury to Onsen and collect rewards\n     * @param _amount uint\n     * @param _stake bool\n     */\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external onlyOwner {\n        address LP = pools[_pid];\n        require(LP != address(0));\n\n        ITreasury(treasury).manage(LP, _amount); // retrieve LP from treasury\n\n        IERC20(LP).approve(masterChef, _amount);\n        IMasterChef(masterChef).deposit(_pid, _amount); // deposit into Onsen\n\n        uint256 value = ITreasury(treasury).tokenValue(LP, _amount);\n        totalValueDeployed = totalValueDeployed.add(value); // add to deployed value tracker\n\n        enterSushiBar(_stake); // manage rewards\n    }\n\n    /**\n     * @notice collect rewards and withdraw LP from Onsen and return to treasury.\n     * @param _amount uint\n     * @param _stake bool\n     */\n    function withdraw(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external onlyOwner {\n        address LP = pools[_pid];\n        require(LP != address(0));\n\n        IMasterChef(masterChef).withdraw(_pid, _amount); // withdraw from Onsen\n\n        uint256 value = ITreasury(treasury).tokenValue(LP, _amount);\n        // remove from deployed value tracker\n        if (value < totalValueDeployed) {\n            totalValueDeployed = totalValueDeployed.sub(value);\n        } else {\n            // LP value grows from fees and may exceed total deployed\n            totalValueDeployed = 0;\n        }\n\n        // approve and deposit LP into treasury\n        IERC20(LP).approve(treasury, _amount);\n        // use value for profit so that no OHM is minted\n        ITreasury(treasury).deposit(_amount, LP, value);\n\n        enterSushiBar(_stake); // manage rewards\n    }\n\n    /**\n     * @notice withdraw Sushi from treasury and stake to xSushi\n     * @param _amount uint\n     */\n    function enterSushiBarFromTreasury(uint256 _amount) external onlyOwner {\n        ITreasury(treasury).manage(sushi, _amount); // retrieve $SUSHI from treasury\n\n        enterSushiBar(true); // stake $SUSHI\n    }\n\n    /**\n     * @notice withdraw xSushi from treasury and unstake to sushi\n     * @param _amount uint\n     */\n    function exitSushiBar(uint256 _amount) external onlyOwner {\n        ITreasury(treasury).manage(xSushi, _amount); // retrieve $xSUSHI from treasury\n\n        ISushiBar(xSushi).leave(_amount); // unstake $xSUSHI\n\n        IERC20(sushi).safeTransfer(treasury, IERC20(sushi).balanceOf(address(this))); // return $SUSHI to treasury\n    }\n\n    /**\n     *  @notice add new PID and corresponding liquidity pool\n     *  @param _pool address\n     *  @param _pid uint\n     */\n    function addPool(address _pool, uint256 _pid) external onlyOwner {\n        require(_pool != address(0));\n        require(pools[_pid] == address(0));\n\n        pids.push(_pid);\n        pools[_pid] = _pool;\n    }\n\n    /**\n     *  @notice remove liquidity pool and corresponding PID\n     *  @param _pool address\n     *  @param _index uint\n     */\n    function removePool(address _pool, uint256 _index) external onlyOwner {\n        uint256 pid = pids[_index];\n        require(pools[pid] == _pool);\n\n        pids[_index] = 0;\n        pools[pid] = address(0);\n    }\n\n    /**\n     *  @notice withdraw liquidity without regard for rewards\n     *  @param _pid uint\n     */\n    function emergencyWithdraw(uint256 _pid) external onlyOwner {\n        address LP = pools[_pid];\n\n        IMasterChef(masterChef).emergencyWithdraw(_pid); // withdraws LP without returning rewards\n\n        uint256 balance = IERC20(LP).balanceOf(address(this));\n        uint256 value = ITreasury(treasury).tokenValue(LP, balance);\n        if (value < totalValueDeployed) {\n            totalValueDeployed = totalValueDeployed.sub(value); // remove from value deployed tracker\n        } else {\n            // value increases with fees and would otherwise cause underflow\n            totalValueDeployed = 0;\n        }\n\n        // approve and deposit LP into treasury\n        IERC20(LP).approve(treasury, balance);\n        // use value for profit so that no OHM is minted\n        ITreasury(treasury).deposit(balance, LP, value);\n    }\n}\n"
    },
    "contracts/interfaces/IAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\ninterface IAllocator {\n    // Should have deposit/withdraw methods (interfaces aren't standardized)\n    function harvest() external;\n}\n"
    },
    "contracts/allocators/RewardHarvestor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"../interfaces/IAllocator.sol\";\n\nimport \"../types/Ownable.sol\";\n\ninterface IOnsenAllocator {\n    function harvest(bool _stake) external;\n}\n\n// @notice contract will claim rewards from multiple allocators in one function call\ncontract RewardHarvester is Ownable {\n    /* ======== STATE VARIABLES ======== */\n\n    address public immutable onsenAllocator;\n    address[] public allocators;\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(address _onsenAllocator, address[] memory _allocators) {\n        require(_onsenAllocator != address(0));\n        onsenAllocator = _onsenAllocator;\n        for (uint256 i; i < _allocators.length; i++) {\n            require(_allocators[i] != address(0));\n        }\n        allocators = _allocators;\n    }\n\n    /* ======== PUBLIC FUNCTION ======== */\n\n    /**\n     *  @notice harvest rewards from allocators\n     *  @param _useOnsen bool\n     */\n    function harvest(bool _useOnsen) external {\n        for (uint256 i; i < allocators.length; i++) {\n            IAllocator(allocators[i]).harvest();\n        }\n        if (_useOnsen) {\n            IOnsenAllocator(onsenAllocator).harvest(true);\n        }\n    }\n\n    /* ======== POLICY FUNCTION ======== */\n\n    /**\n     *  @notice update array of allocators\n     *  @param _allocators address[]\n     */\n    function updateAllocator(address[] calldata _allocators) external onlyOwner {\n        allocators = _allocators;\n    }\n}\n"
    },
    "contracts/allocators/GroAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\nimport \"../libraries/Address.sol\";\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IAllocator.sol\";\n\nimport \"../types/Ownable.sol\";\n\ninterface IGroDepositHandler {\n    // deposit DAI to Gro\n    function depositPwrd(\n        uint256[3] memory inAmounts,\n        uint256 minAmount,\n        address _referral\n    ) external;\n}\n\ninterface IGroWithdrawHandler {\n    // withdraw DAI from Gro\n    function withdrawAllSingle(\n        bool pwrd,\n        uint256 index,\n        uint256 minAmount\n    ) external;\n}\n\n/**\n *  Contract deploys reserves from treasury into the Gro\n */\n\ncontract GroDAIAllocator is Ownable {\n    /* ======== DEPENDENCIES ======== */\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /* ======== STATE VARIABLES ======== */\n\n    IGroDepositHandler public immutable groDepositHandler; // GRO deposit handler\n    IGroWithdrawHandler public immutable groWithdrawHandler; // GRO withdraw handler\n    ITreasury public immutable treasury;\n\n    address public immutable DAI;\n\n    uint256 public totalValueDeployed; // total RFV deployed into lending pool\n    uint256 public deployed;\n    uint256 public limit;\n    uint256 public newLimit;\n    uint256 public limitChangeTimelockEnd;\n    uint256 public immutable timelockInBlocks; // timelock to raise deployment limit\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(\n        address _treasury,\n        address _groDepositHandler,\n        address _groWithdrawHandler,\n        address _DAI,\n        uint256 _timelockInBlocks,\n        uint256 _limit\n    ) {\n        require(_treasury != address(0));\n        treasury = ITreasury(_treasury);\n\n        require(_groDepositHandler != address(0));\n        groDepositHandler = IGroDepositHandler(_groDepositHandler);\n\n        require(_groWithdrawHandler != address(0));\n        groWithdrawHandler = IGroWithdrawHandler(_groWithdrawHandler);\n\n        require(_DAI != address(0));\n        DAI = _DAI;\n\n        timelockInBlocks = _timelockInBlocks;\n\n        limit = _limit;\n    }\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    /**\n     *  @notice withdraws asset from treasury, deposits asset into Gro\n     *  @param amount uint\n     *  @param minAmount uint\n     */\n    function deposit(uint256 amount, uint256 minAmount) public onlyOwner {\n        require(!exceedsLimit(amount)); // ensure deposit is within bounds\n\n        treasury.manage(DAI, amount); // retrieve amount of asset from treasury\n\n        // account for deposit\n        uint256 value = treasury.tokenValue(DAI, amount);\n        accountingFor(amount, value, true);\n\n        IERC20(DAI).approve(address(groDepositHandler), amount); // approve Gro deposit handler to spend tokens\n\n        groDepositHandler.depositPwrd([amount, 0, 0], minAmount, address(0)); // deposit into Gro\n    }\n\n    /**\n     *  @notice withdraws DAI from Gro, then deposits asset into treasury\n     *  @param minAmount uint\n     */\n    function withdraw(uint256 minAmount) public onlyOwner {\n        groWithdrawHandler.withdrawAllSingle(true, 0, minAmount); // withdraw from Gro\n\n        uint256 balance = IERC20(DAI).balanceOf(address(this)); // balance of asset withdrawn\n\n        // account for withdrawal\n        uint256 value = treasury.tokenValue(DAI, balance);\n        accountingFor(balance, value, false);\n\n        IERC20(DAI).approve(address(treasury), balance); // approve to deposit asset into treasury\n        treasury.deposit(balance, DAI, value); // deposit using value as profit so no OHM is minted\n    }\n\n    /**\n     *  @notice lowers max can be deployed for asset (no timelock)\n     *  @param newMax uint\n     */\n    function lowerLimit(uint256 newMax) external onlyOwner {\n        require(newMax < limit);\n        require(newMax > deployed); // cannot set limit below what has been deployed already\n        limit = newMax;\n    }\n\n    /**\n     *  @notice starts timelock to raise max allocation for asset\n     *  @param newMax uint\n     */\n    function queueRaiseLimit(uint256 newMax) external onlyOwner {\n        limitChangeTimelockEnd = block.number.add(timelockInBlocks);\n        newLimit = newMax;\n    }\n\n    /**\n     *  @notice changes max allocation for asset when timelock elapsed\n     */\n    function raiseLimit() external onlyOwner {\n        require(block.number >= limitChangeTimelockEnd, \"Timelock not expired\");\n        require(limitChangeTimelockEnd != 0, \"Timelock not started\");\n\n        limit = newLimit;\n        newLimit = 0;\n        limitChangeTimelockEnd = 0;\n    }\n\n    /* ======== INTERNAL FUNCTIONS ======== */\n\n    /**\n     *  @notice accounting of deposits/withdrawals of assets\n     *  @param amount uint\n     *  @param value uint\n     *  @param add bool\n     */\n    function accountingFor(\n        uint256 amount,\n        uint256 value,\n        bool add\n    ) internal {\n        if (add) {\n            deployed = deployed.add(amount); // track amount allocated into pool\n\n            totalValueDeployed = totalValueDeployed.add(value); // track total value allocated into pools\n        } else {\n            // track amount allocated into pool\n            if (amount < deployed) {\n                deployed = deployed.sub(amount);\n            } else {\n                deployed = 0;\n            }\n\n            // track total value allocated into pools\n            if (value < totalValueDeployed) {\n                totalValueDeployed = totalValueDeployed.sub(value);\n            } else {\n                totalValueDeployed = 0;\n            }\n        }\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     *  @notice checks to ensure deposit does not exceed max allocation for asset\n     *  @param amount uint\n     */\n    function exceedsLimit(uint256 amount) public view returns (bool) {\n        uint256 willBeDeployed = deployed.add(amount);\n\n        return (willBeDeployed > limit);\n    }\n}\n"
    },
    "contracts/allocators/FraxSharesAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\n\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IAllocator.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\ninterface IveFXS is IERC20 {\n    /**\n     * @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\n     * @param _value Amount to deposit\n     * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\n     */\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\n\n    /**\n     * @notice Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time\n     * @param _value Amount of tokens to deposit and add to the lock\n     */\n    function increase_amount(uint256 _value) external;\n\n    /**\n     * @notice Extend the unlock time for `msg.sender` to `_unlock_time`\n     * @param _unlock_time New epoch time for unlocking\n     */\n    function increase_unlock_time(uint256 _unlock_time) external;\n\n    /**\n     * @notice Get timestamp when `_addr`'s lock finishes\n     * @param _addr wallet address\n     * @return Epoch time of the lock end\n     */\n    function locked__end(address _addr) external view returns (uint256);\n}\n\ninterface IveFXSYieldDistributorV4 {\n    /**\n     * @notice transfers FXS earned by locking veFXS\n     * @return the amount of FXS transferred\n     */\n    function getYield() external returns (uint256);\n\n    /**\n     * @notice returns the pending rewards for an address\n     */\n    function earned(address _address) external view returns (uint256);\n\n    /* BELOW USED ONLY IN TESTS */\n\n    /**\n     * @notice forces an update of a user's rewards\n     */\n    function checkpointOtherUser(address _address) external;\n\n    /**\n     * @notice requests FXS rewards to pulled from msg.sender\n     */\n    function notifyRewardAmount(uint256 amount) external;\n\n    /**\n     * @notice allows an address to call notifyRewardAmount\n     */\n    function toggleRewardNotifier(address notifier_addr) external;\n\n    /**\n     * @notice returns the number of seconds until a reward is fully distributed\n     */\n    function yieldDuration() external returns (uint256);\n}\n\ncontract FraxSharesAllocator is Initializable, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMathUpgradeable for uint256;\n\n    /* ======== STATE VARIABLES ======== */\n    /* !!!! UPGRADABLE CONTRACT !!!! */\n    /* NEW STATE VARIABLES MUST BE APPENDED TO END */\n\n    uint256 private constant MAX_TIME = 4 * 365 * 86400 + 1; // 4 years and 1 second\n    ITreasury public treasury;\n    IERC20 public fxs; // $FXS token\n    IveFXS public veFXS; // $veFXS token\n    IveFXSYieldDistributorV4 public veFXSYieldDistributorV4;\n\n    // uint256 public totalValueDeployed; // FXS isn't a reserve token, so will always be 0\n    uint256 public totalAmountDeployed;\n    uint256 public lockEnd; // tracks the expiry of veFXS to know if can be extended\n\n    /* ======== INITIALIZER ======== */\n    function initialize(\n        address _treasury,\n        address _fxs,\n        address _veFXS,\n        address _veFXSYieldDistributorV4\n    ) public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n\n        require(_treasury != address(0), \"zero treasury address\");\n        treasury = ITreasury(_treasury);\n\n        require(_fxs != address(0), \"zero FXS address\");\n        fxs = IERC20(_fxs);\n\n        require(_veFXS != address(0), \"zero veFXS address\");\n        veFXS = IveFXS(_veFXS);\n\n        require(_veFXSYieldDistributorV4 != address(0), \"zero veFXSYieldDistributorV4 address\");\n        veFXSYieldDistributorV4 = IveFXSYieldDistributorV4(_veFXSYieldDistributorV4);\n\n        totalAmountDeployed = 0;\n    }\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    /**\n     * @notice harvest FXS rewards, will relock all veFXS for the maximum amount of time (4 years)\n     */\n    function harvest() external {\n        uint256 amount = veFXSYieldDistributorV4.getYield();\n\n        if (amount > 0) {\n            totalAmountDeployed = totalAmountDeployed.add(amount);\n\n            fxs.safeApprove(address(veFXS), amount);\n            veFXS.increase_amount(amount);\n            if (_canExtendLock()) {\n                lockEnd = block.timestamp + MAX_TIME;\n                veFXS.increase_unlock_time(block.timestamp + MAX_TIME);\n            }\n        }\n    }\n\n    /**\n     *  @notice withdraws FXS from treasury, locks as veFXS for maximum time (4 years).\n     *  @param _amount uint\n     */\n    function deposit(uint256 _amount) external onlyOwner {\n        treasury.manage(address(fxs), _amount);\n\n        uint256 prevAmount = totalAmountDeployed;\n        totalAmountDeployed = totalAmountDeployed.add(_amount);\n\n        fxs.safeApprove(address(veFXS), _amount);\n        if (prevAmount == 0) {\n            lockEnd = block.timestamp + MAX_TIME;\n            veFXS.create_lock(_amount, lockEnd);\n        } else {\n            veFXS.increase_amount(_amount);\n            if (_canExtendLock()) {\n                lockEnd = block.timestamp + MAX_TIME;\n                veFXS.increase_unlock_time(block.timestamp + MAX_TIME);\n            }\n        }\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"zero treasury address\");\n        treasury = ITreasury(_treasury);\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    function getPendingRewards() public view returns (uint256) {\n        return veFXSYieldDistributorV4.earned(address(this));\n    }\n\n    function _canExtendLock() internal view returns (bool) {\n        return lockEnd < block.timestamp + MAX_TIME - 7 * 86400;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/allocators/FraxSharesAllocatorVNext.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"./FraxSharesAllocator.sol\";\n\n/**\n * @notice this allows us to test proxy upgrades\n */\ncontract FraxSharesAllocatorVNext is Initializable, OwnableUpgradeable {\n    /* ======== STATE VARIABLES ======== */\n    /* !!!! UPGRADABLE CONTRACT !!!! */\n    /* NEW STATE VARIABLES MUST BE APPENDED TO END */\n\n    uint256 private constant MAX_TIME = 4 * 365 * 86400 + 1; // 4 years and 1 second\n    ITreasury public treasury;\n    IERC20 public fxs; // $FXS token\n    IveFXS public veFXS; // $veFXS token\n    IveFXSYieldDistributorV4 public veFXSYieldDistributorV4;\n\n    // uint256 public totalValueDeployed; // FXS isn't a reserve token, so will always be 0\n    uint256 public totalAmountDeployed;\n    uint256 public lockEnd; // tracks the expiry of veFXS to know if can be extended\n\n    function didUpgrade() external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/allocators/ConvexAllocator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"../libraries/Address.sol\";\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IAllocator.sol\";\n\nimport \"../types/OlympusAccessControlled.sol\";\n\ninterface ICurve3Pool {\n    // add liquidity to Curve to receive back 3CRV tokens\n    function add_liquidity(\n        address _pool,\n        uint256[4] memory _deposit_amounts,\n        uint256 _min_mint_amount\n    ) external returns (uint256);\n\n    // remove liquidity Curve liquidity to recieve back base token\n    function remove_liquidity_one_coin(\n        address _pool,\n        uint256 _burn_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external returns (uint256);\n}\n\n//main Convex contract(booster.sol) basic interface\ninterface IConvex {\n    //deposit into convex, receive a tokenized deposit.  parameter to stake immediately\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n}\n\n//sample convex reward contracts interface\ninterface IConvexRewards {\n    //withdraw directly to curve LP token\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\n\n    //claim rewards\n    function getReward() external returns (bool);\n\n    //get rewards for an address\n    function earned(address _account) external view returns (uint256);\n}\n\n/**\n *  Contract deploys reserves from treasury into the Convex lending pool,\n *  earning interest and $CVX.\n */\n\ncontract ConvexAllocator is OlympusAccessControlled {\n    /* ======== DEPENDENCIES ======== */\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /* ======== STRUCTS ======== */\n\n    struct TokenData {\n        address underlying;\n        address curveToken;\n        IConvexRewards rewardPool;\n        address[] rewardTokens;\n        int128 index;\n        uint256 deployed;\n        uint256 limit;\n        uint256 newLimit;\n        uint256 limitChangeTimelockEnd;\n    }\n\n    /* ======== STATE VARIABLES ======== */\n\n    // Convex deposit contract\n    IConvex internal immutable booster = IConvex(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    // Curve 3Pool\n    ICurve3Pool internal immutable curve3Pool = ICurve3Pool(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\n    // Olympus Treasury\n    ITreasury internal treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\n\n    // info for deposited tokens\n    mapping(address => TokenData) public tokenInfo;\n    // convex pid for token\n    mapping(address => uint256) public pidForReserve;\n    // total RFV deployed into lending pool\n    uint256 public totalValueDeployed;\n    // timelock to raise deployment limit\n    uint256 public immutable timelockInBlocks = 6600;\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\n\n    /* ======== OPEN FUNCTIONS ======== */\n\n    /**\n     * @notice claims accrued CVX rewards for all tracked crvTokens\n     */\n    function harvest(address[] memory tokens) external {\n        for (uint256 i; i < tokens.length; i++) {\n            TokenData memory tokenData = tokenInfo[tokens[i]];\n            address[] memory rewardTokens = tokenData.rewardTokens;\n\n            tokenData.rewardPool.getReward();\n\n            for (uint256 r = 0; r < rewardTokens.length; r++) {\n                uint256 balance = IERC20(rewardTokens[r]).balanceOf(address(this));\n\n                if (balance > 0) {\n                    IERC20(rewardTokens[r]).safeTransfer(address(treasury), balance);\n                }\n            }\n        }\n    }\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    function updateTreasury() external onlyGuardian {\n        require(authority.vault() != address(0), \"Zero address: Vault\");\n        require(address(authority.vault()) != address(treasury), \"No change\");\n        treasury = ITreasury(authority.vault());\n    }\n\n    /**\n     * @notice withdraws asset from treasury, deposits asset into lending pool, then deposits crvToken into convex\n     */\n    function deposit(\n        address token,\n        uint256 amount,\n        uint256[4] calldata amounts,\n        uint256 minAmount\n    ) public onlyGuardian {\n        require(!exceedsLimit(token, amount), \"Exceeds deployment limit\");\n        address curveToken = tokenInfo[token].curveToken;\n\n        // retrieve amount of asset from treasury\n        treasury.manage(token, amount);\n\n        // account for deposit\n        uint256 value = treasury.tokenValue(token, amount);\n        accountingFor(token, amount, value, true);\n\n        // approve and deposit into curve\n        IERC20(token).approve(address(curve3Pool), amount);\n        uint256 curveAmount = curve3Pool.add_liquidity(curveToken, amounts, minAmount);\n\n        // approve and deposit into convex\n        IERC20(curveToken).approve(address(booster), curveAmount);\n        booster.deposit(pidForReserve[token], curveAmount, true);\n    }\n\n    /**\n     * @notice withdraws crvToken from convex, withdraws from lending pool, then deposits asset into treasury\n     */\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint256 minAmount,\n        bool reserve\n    ) public onlyGuardian {\n        address curveToken = tokenInfo[token].curveToken;\n\n        // withdraw from convex\n        tokenInfo[token].rewardPool.withdrawAndUnwrap(amount, false);\n\n        // approve and withdraw from curve\n        IERC20(curveToken).approve(address(curve3Pool), amount);\n        curve3Pool.remove_liquidity_one_coin(curveToken, amount, tokenInfo[token].index, minAmount);\n\n        uint256 balance = IERC20(token).balanceOf(address(this));\n\n        // account for withdrawal\n        uint256 value = treasury.tokenValue(token, balance);\n        accountingFor(token, balance, value, false);\n\n        if (reserve) {\n            // approve and deposit asset into treasury\n            IERC20(token).approve(address(treasury), balance);\n            treasury.deposit(balance, token, value);\n        } else IERC20(token).safeTransfer(address(treasury), balance);\n    }\n\n    /**\n     * @notice adds asset and corresponding crvToken to mapping\n     */\n    function addToken(\n        address token,\n        address curveToken,\n        address rewardPool,\n        address[] memory rewardTokens,\n        int128 index,\n        uint256 max,\n        uint256 pid\n    ) external onlyGuardian {\n        require(token != address(0), \"Zero address: Token\");\n        require(curveToken != address(0), \"Zero address: Curve Token\");\n        require(tokenInfo[token].deployed == 0, \"Token added\");\n\n        tokenInfo[token] = TokenData({\n            underlying: token,\n            curveToken: curveToken,\n            rewardPool: IConvexRewards(rewardPool),\n            rewardTokens: rewardTokens,\n            index: index,\n            deployed: 0,\n            limit: max,\n            newLimit: 0,\n            limitChangeTimelockEnd: 0\n        });\n\n        pidForReserve[token] = pid;\n    }\n\n    /**\n     * @notice add new reward token to be harvested\n     */\n    function addRewardTokens(address baseToken, address[] memory rewardTokens) external onlyGuardian {\n        tokenInfo[baseToken].rewardTokens = rewardTokens;\n    }\n\n    /**\n     * @notice lowers max can be deployed for asset (no timelock)\n     */\n    function lowerLimit(address token, uint256 newMax) external onlyGuardian {\n        require(newMax < tokenInfo[token].limit, \"Must be lower\");\n        require(newMax > tokenInfo[token].deployed, \"Greater than deployed\");\n        tokenInfo[token].limit = newMax;\n    }\n\n    /**\n     * @notice starts timelock to raise max allocation for asset\n     */\n    function queueRaiseLimit(address token, uint256 newMax) external onlyGuardian {\n        tokenInfo[token].limitChangeTimelockEnd = block.number.add(timelockInBlocks);\n        tokenInfo[token].newLimit = newMax;\n    }\n\n    /**\n     * @notice changes max allocation for asset when timelock elapsed\n     */\n    function raiseLimit(address token) external onlyGuardian {\n        require(block.number >= tokenInfo[token].limitChangeTimelockEnd, \"Timelock not expired\");\n        require(tokenInfo[token].limitChangeTimelockEnd != 0, \"Timelock not started\");\n\n        tokenInfo[token].limit = tokenInfo[token].newLimit;\n        tokenInfo[token].newLimit = 0;\n        tokenInfo[token].limitChangeTimelockEnd = 0;\n    }\n\n    /* ======== INTERNAL FUNCTIONS ======== */\n\n    /**\n     * @notice accounting of deposits/withdrawals of assets\n     */\n    function accountingFor(\n        address token,\n        uint256 amount,\n        uint256 value,\n        bool add\n    ) internal {\n        if (add) {\n            tokenInfo[token].deployed = tokenInfo[token].deployed.add(amount); // track amount allocated into pool\n            totalValueDeployed = totalValueDeployed.add(value); // track total value allocated into pools\n        } else {\n            // track amount allocated into pool\n            if (amount < tokenInfo[token].deployed) {\n                tokenInfo[token].deployed = tokenInfo[token].deployed.sub(amount);\n            } else tokenInfo[token].deployed = 0;\n\n            // track total value allocated into pools\n            if (value < totalValueDeployed) {\n                totalValueDeployed = totalValueDeployed.sub(value);\n            } else totalValueDeployed = 0;\n        }\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     * @notice query all pending rewards for a specific base token\n     */\n    function rewardsPending(address baseToken) external view returns (uint256) {\n        return tokenInfo[baseToken].rewardPool.earned(address(this));\n    }\n\n    /**\n     * @notice checks to ensure deposit does not exceed max allocation for asset\n     */\n    function exceedsLimit(address token, uint256 amount) public view returns (bool) {\n        uint256 willBeDeployed = tokenInfo[token].deployed.add(amount);\n        return (willBeDeployed > tokenInfo[token].limit);\n    }\n}\n"
    },
    "contracts/OLD/OLDwsOHM.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-06-12\n */\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IsOHMOLD {\n    function INDEX() external view returns (uint256);\n}\n\ncontract wOHM is ERC20 {\n    using SafeERC20 for ERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    address public immutable sOHM;\n\n    constructor(address _sOHM) ERC20(\"Wrapped sOHM\", \"wsOHM\") {\n        require(_sOHM != address(0));\n        sOHM = _sOHM;\n    }\n\n    /**\n        @notice wrap sOHM\n        @param _amount uint\n        @return uint\n     */\n    function wrap(uint256 _amount) external returns (uint256) {\n        IERC20(sOHM).transferFrom(msg.sender, address(this), _amount);\n\n        uint256 value = sOHMTowOHM(_amount);\n        _mint(msg.sender, value);\n        return value;\n    }\n\n    /**\n        @notice unwrap sOHM\n        @param _amount uint\n        @return uint\n     */\n    function unwrap(uint256 _amount) external returns (uint256) {\n        _burn(msg.sender, _amount);\n\n        uint256 value = wOHMTosOHM(_amount);\n        IERC20(sOHM).transfer(msg.sender, value);\n        return value;\n    }\n\n    /**\n        @notice converts wOHM amount to sOHM\n        @param _amount uint\n        @return uint\n     */\n    function wOHMTosOHM(uint256 _amount) public view returns (uint256) {\n        return _amount.mul(IsOHMOLD(sOHM).INDEX()).div(10**decimals());\n    }\n\n    /**\n        @notice converts sOHM amount to wOHM\n        @param _amount uint\n        @return uint\n     */\n    function sOHMTowOHM(uint256 _amount) public view returns (uint256) {\n        return _amount.mul(10**decimals()).div(IsOHMOLD(sOHM).INDEX());\n    }\n}\n"
    },
    "contracts/mocks/AccessControlledMock.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.7.5;\n\nimport \"../types/OlympusAccessControlled.sol\";\n\ncontract AccessControlledMock is OlympusAccessControlled {\n    constructor(address _auth) OlympusAccessControlled(IOlympusAuthority(_auth)) {}\n\n    bool public governorOnlyTest;\n\n    bool public guardianOnlyTest;\n\n    bool public policyOnlyTest;\n\n    bool public vaultOnlyTest;\n\n    function governorTest() external onlyGovernor returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n\n    function guardianTest() external onlyGuardian returns (bool) {\n        guardianOnlyTest = true;\n        return guardianOnlyTest;\n    }\n\n    function policyTest() external onlyPolicy returns (bool) {\n        policyOnlyTest = true;\n        return policyOnlyTest;\n    }\n\n    function vaultTest() external onlyVault returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}